<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RonaldLu&#39;s Blog</title>
  
  <subtitle>Bien faire et laisser dire</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-04T04:14:38.306Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lu, Ruihui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端面试 —— JavaScript基础篇</title>
    <link href="http://yoursite.com/Interview-Questions/frontend-interview-js/"/>
    <id>http://yoursite.com/Interview-Questions/frontend-interview-js/</id>
    <published>2020-07-24T01:21:52.000Z</published>
    <updated>2020-08-04T04:14:38.306Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/Interview-Questions/frontend-interview-js/js.png" width="100%" height="100%" alt="git"><br><a id="more"></a><br>&emsp;&emsp;在准备前端面试的过程中，发现前端的知识体系涉及的内容很广很多，在网上搜罗整理了一些前端面试的问题及答案，一方面是为了面试，另一方面是对很多基础和常用知识的复习。本篇是JavaScript基础篇<br>&emsp;&emsp;传送门：<br>&emsp;&emsp;<a href="https://cs-lurh.me/Interview-Questions/frontend-interview-react/" target="_blank" rel="noopener">前端面试 —— React篇</a></p><h3 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h3><h4 id="JS中基本数据类型和引用类型有哪些？"><a href="#JS中基本数据类型和引用类型有哪些？" class="headerlink" title="JS中基本数据类型和引用类型有哪些？"></a>JS中基本数据类型和引用类型有哪些？</h4><p>&emsp;&emsp;JS中基本类型（值类型）有Number、Boolean、String、Undefined、Null、Symbol（ES6）；引用类型有Object、Array、Function、Date、RegExp…</p><h4 id="JS中基本数据类型和引用类型在内存上的区别？"><a href="#JS中基本数据类型和引用类型在内存上的区别？" class="headerlink" title="JS中基本数据类型和引用类型在内存上的区别？"></a>JS中基本数据类型和引用类型在内存上的区别？</h4><p>&emsp;&emsp;基本数据类型是存储在栈内存中的简单数据段，其变量和数据以及存储空间是一一对应的；而引用类型是存储在堆内存中的对象，通常来说可以多个引用类型变量指向同一存储空间块</p><h4 id="null和undefined的区别？"><a href="#null和undefined的区别？" class="headerlink" title="null和undefined的区别？"></a>null和undefined的区别？</h4><p>&emsp;&emsp;null表示的是一个空指针，也就是“无”的对象，转为数值是0；而undefined表示的是“无”的原始值，转为数值是NaN。当声明的变量还未被初始化时，默认值时undefined，而null通常来说是空的对象</p><h4 id="如何判断一个对象是否为空对象？"><a href="#如何判断一个对象是否为空对象？" class="headerlink" title="如何判断一个对象是否为空对象？"></a>如何判断一个对象是否为空对象？</h4><p>&emsp;&emsp;a. 利用for…in遍历对象属性，如果for…in执行，则非空对象；否则空对象<br>&emsp;&emsp;b. 利用JSON.stringify()将检测对象转换成JSON字符串，如：JSON.stringify(target) === ‘{}’<br>&emsp;&emsp;c. 利用ES6新增的Object.keys()方法，如果目标是空对象，该方法会返回一个空数组</p><h4 id="原型规则和原型链？"><a href="#原型规则和原型链？" class="headerlink" title="原型规则和原型链？"></a>原型规则和原型链？</h4><p>&emsp;&emsp;a. 所有的引用类型（数组、对象、函数），都具有对象特性，即可自由扩展属性（除了”null”以外）<br>&emsp;&emsp;b. 所有的引用类型（数组、对象、函数），都有一个<strong>proto</strong>（隐式原型）属性，属性值是一个普通的对象<br>&emsp;&emsp;c. 所有的函数都有一个prototype（显式原型）属性，属性值是一个普通的对象<br>&emsp;&emsp;d. 所有的引用类型（数组、对象、函数），<strong>proto</strong>属性指向（===）它的构造函数的prototype属性<br>&emsp;&emsp;e. 当试图得到一个对象（引用类型）的某个属性或方法时，如果这个对象本身没有，那么会去<strong>proto</strong>（对应构造函数的prototype）中去寻找；如果依然不存在，则会去构造函数上一层的prototype继续查找，直到找到目标属性/方法，或者到该条链路径的顶点，这条查找的链路径就是原型链</p><h4 id="typeof、instanceof和valueOf区别？"><a href="#typeof、instanceof和valueOf区别？" class="headerlink" title="typeof、instanceof和valueOf区别？"></a>typeof、instanceof和valueOf区别？</h4><p>&emsp;&emsp;typeof操作符返回字符串，表示未经求值的操作数的类型，返回值为number、boolean、string、undefined、object、function、symbol（ES6）<br>&emsp;&emsp;A instanceof B用来判断A是否是构造函数B的一个实例或者其子类的一个实例对象<br>&emsp;&emsp;valueOf其实就是返回对象的原始值</p><h4 id="instanceof的原理？"><a href="#instanceof的原理？" class="headerlink" title="instanceof的原理？"></a>instanceof的原理？</h4><p>&emsp;&emsp;判断某个构造函数的显式原型（prototype）属性所指向的对象是否存在于要检测对象的原型链上</p><h4 id="new操作符的原理？"><a href="#new操作符的原理？" class="headerlink" title="new操作符的原理？"></a>new操作符的原理？</h4><p>&emsp;&emsp;a. 生成一个新的对象，并将this指向这个对象<br>&emsp;&emsp;b. 执行构造函数代码，并根据传入参数对this的相应属性进行赋值<br>&emsp;&emsp;c. 默认将this对象返回（因此无需显式调用return语句），并赋值给对应的实例变量</p><h4 id="原型链的封装和继承？"><a href="#原型链的封装和继承？" class="headerlink" title="原型链的封装和继承？"></a>原型链的封装和继承？</h4><p>&emsp;&emsp;原型链的封装和继承其实就是将实例具有共同属性和方法绑定在其构造函数的prototype上，这样可以有效地避免在生成实例时，重复开辟很多相同属性的内存空间，转而用原型链继承的方式传递给实例的<strong>proto</strong>属性，因此实例可以使用这些属性和方法</p><h4 id="正则表达式？"><a href="#正则表达式？" class="headerlink" title="正则表达式？"></a>正则表达式？</h4><p>&emsp;&emsp;考察正则一般会根据要求写出相应表达式 - <a href="https://juejin.im/post/5ac1f1106fb9a028be362731" target="_blank" rel="noopener">练习传送门</a></p><h4 id="阻止冒泡的方法？阻止默认事件的方法？"><a href="#阻止冒泡的方法？阻止默认事件的方法？" class="headerlink" title="阻止冒泡的方法？阻止默认事件的方法？"></a>阻止冒泡的方法？阻止默认事件的方法？</h4><p>&emsp;&emsp;阻止冒泡：考虑浏览器的兼容性问题，通常是将event.stopPropagation()和event.cancelBubble = true组合使用。<br>&emsp;&emsp;阻止默认事件：同样地，event.preventDefault()和event.returnValue = false;</p><h4 id="JS的垃圾回收机制（GC）？"><a href="#JS的垃圾回收机制（GC）？" class="headerlink" title="JS的垃圾回收机制（GC）？"></a>JS的垃圾回收机制（GC）？</h4><p>&emsp;&emsp;最常用的方法是“引用计数”：语言引擎有一张“引用表”，保存了内存中所有资源（通常是各种值）的引用次数。当一个值的引用次数为0，表示这个值不再使用了，然后可以将这块内存释放。也有特殊情况存在，就是值不再需要了，但是引用数却不是0，因此GC无法释放这块内存，导致内存泄漏<br>&emsp;&emsp;第二种是标记清除，当变量进入执行环境标记为“进入环境”，当变量离开执行环境时标记为“离开环境”，标记为“进入环境”的是不能被回收的，而“离开环境”可以被回收<br>&emsp;&emsp;详细请见<a href="https://juejin.im/post/5b684f30f265da0f9f4e87cf" target="_blank" rel="noopener">https://juejin.im/post/5b684f30f265da0f9f4e87cf</a></p><h4 id="如何判断一个变量是Array类型？"><a href="#如何判断一个变量是Array类型？" class="headerlink" title="如何判断一个变量是Array类型？"></a>如何判断一个变量是Array类型？</h4><p>&emsp;&emsp;首先，typeof操作符是不能区分对象（object）和数组（array）的，都会返回”object”，因此可用以下三种方法来判断Array类型：<br>&emsp;&emsp;a. Array.isArray(arr)<br>&emsp;&emsp;b. arr instanceof Array<br>&emsp;&emsp;c. Object.prototype.toString.call(arr) === ‘[object Array]’</p><h4 id="谈一谈闭包？"><a href="#谈一谈闭包？" class="headerlink" title="谈一谈闭包？"></a>谈一谈闭包？</h4><p>&emsp;&emsp;闭包就是能够读取其他函数内部变量的函数，在JS中，只有函数内部的子函数才能读取其内部变量，因此闭包简单说也可以是定义在函数内部的函数。本质上，闭包是将函数内部和外部连接起来的桥梁；当某个函数的内部子函数访问该函数的内部变量时，这个子函数就构成了闭包。闭包可以用来封装变量，收敛权限。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function getList() &#123;</span><br><span class="line">var _list = [1, 2, 3, 4];</span><br><span class="line">return function(index) &#123;</span><br><span class="line">console.log(_list[index]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var getElem = getList();</span><br><span class="line">getElem(1);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;闭包的三个特性：1. 函数嵌套函数；2. 内部函数使用外部函数的参数和变量；3. 外部的参数和变量不会被GC回收<br>&emsp;&emsp;闭包的缺点：1. 常驻内存，增加了内存使用量；2. 使用不当造成内存泄漏</p><h4 id="call、apply、bind区别？"><a href="#call、apply、bind区别？" class="headerlink" title="call、apply、bind区别？"></a>call、apply、bind区别？</h4><p>&emsp;&emsp;call和apply都是将函数的this对象绑定到传入的第一个参数对象上，而bind是返回一个新函数，然后将this设置为第一个参数，并接受额外参数；call和apply的区别是参数接收形式，apply是参数数组，call是参数列表</p><h4 id="this的使用场景？"><a href="#this的使用场景？" class="headerlink" title="this的使用场景？"></a>this的使用场景？</h4><p>&emsp;&emsp;this要在执行时才能确认值，定义时无法确认：a. 作为构造函数执行; b. 作为对象属性执行; c. 作为普通函数执行; d. call、apply、bind; e. 箭头函数中的this（ES6）</p><h4 id="创建对象的多种方式？"><a href="#创建对象的多种方式？" class="headerlink" title="创建对象的多种方式？"></a>创建对象的多种方式？</h4><p>&emsp;&emsp;a. 工厂模式：定义一个函数，在函数内部创建Object对象，然后增加需要的属性（值/函数），返回这个对象。缺点：对象无法识别，因为所有实例都指向一个原型<br>&emsp;&emsp;b. 构造函数模式：利用构造函数来创建对象。优点：实例可以为一个特定类型，缺点：耗内存，每个实例，都需要创建所有属性和方法。<br>&emsp;&emsp;c. 原型模式：利用原型链，在构造函数的prototype上加入需要的方法和属性。优点：节省内存，不用反复创建方法，缺点：所有属性和方法都是共享的，无法初始化参数<br>&emsp;&emsp;d. 组合模式：结合b和c，共享的属性和方法使用原型模式，然后利用构造函数模式初始化独有参数。优点：该共享共享，该私有私有，最广泛的创建方式</p><h4 id="实现继承的多种方式和优缺点？"><a href="#实现继承的多种方式和优缺点？" class="headerlink" title="实现继承的多种方式和优缺点？"></a>实现继承的多种方式和优缺点？</h4><p>&emsp;&emsp;a. 原型链继承：类型的所有属性都被实例共享；2. 创建子类实例的时候，无法向父类传参。<br>&emsp;&emsp;b. 构造函数继承（经典继承）：在子类型中调用父类型的构造函数并用call改变this指向，优点：避免了类型的属性被所有实例共享；2. 可以向父类型传递参数；缺点：耗内存，新建一个实例，就会新创建所有的方法和属性，不管是否是相同的。<br>&emsp;&emsp;c. 组合继承：a和b混用。缺点是会调用父构造函数两次<br>&emsp;&emsp;d. 原型式继承：模拟Object.create()的实现，将传入参数作为对象的原型。缺点：共享<br>&emsp;&emsp;e. 寄生式继承：创建一个仅用于封装继承过程的函数，函数内部以某种形式增强对象，最后返回对象。跟b缺点一样<br>&emsp;&emsp;f. 寄生组合式继承：将组合继承的两次父构造函数调用，减少为一次<br>&emsp;&emsp;详细请见<a href="https://juejin.im/post/5d28374951882564ca686ef2" target="_blank" rel="noopener">https://juejin.im/post/5d28374951882564ca686ef2</a></p><h4 id="匿名函数的应用场景？"><a href="#匿名函数的应用场景？" class="headerlink" title="匿名函数的应用场景？"></a>匿名函数的应用场景？</h4><p>&emsp;&emsp;a. 闭包; b. 自执行函数（匿名函数）; c. 回调函数</p><h4 id="attribute和property的区别？"><a href="#attribute和property的区别？" class="headerlink" title="attribute和property的区别？"></a>attribute和property的区别？</h4><p>&emsp;&emsp;attribute是指HTML元素上的属性，使用setAttribute()和getAttribute()来设置和获取；而property是JS对象的属性（获取的DOM节点在JS中是一个对象），设置和获取与常规JS对象属性无异</p><h4 id="window-onload和document-DOMContentLoaded两个事件的区别？"><a href="#window-onload和document-DOMContentLoaded两个事件的区别？" class="headerlink" title="window.onload和document.DOMContentLoaded两个事件的区别？"></a>window.onload和document.DOMContentLoaded两个事件的区别？</h4><p>&emsp;&emsp;window.onload在页面的全部资源（包括样式表、图片、音频、子框架…）加载完后执行；而DOMContentLoaded是在HTML文档加载和解析后执行，即DOM渲染完执行，不需要等待其他资源加载<br>&emsp;&emsp;DOM完整解析过程<a href="https://www.jianshu.com/p/1a8a7e698447" target="_blank" rel="noopener">https://www.jianshu.com/p/1a8a7e698447</a></p><h4 id="和-的区别？"><a href="#和-的区别？" class="headerlink" title="== 和 === 的区别？"></a>== 和 === 的区别？</h4><p>&emsp;&emsp;== 是弱相等，会先进行强制类型转换，然后进行值比较；=== 是严格相等，会比较两个变量的类型和值</p><h4 id="？"><a href="#？" class="headerlink" title="[], [] === [], [] == []？"></a>[], [] === [], [] == []？</h4><p>&emsp;&emsp;空数组[]在JS中也是一个object，因此用在判断条件时会转换成true；但是任意值和布尔值比较时，都会将两边的值转换成Number: [] = 0, false = 0, true = 1<br>&emsp;&emsp;[] == [] 和 [] === [] 都是false，因为 [] 属于引用类型，引用类型的比较是需要比较两个引用值在内存中是否指向同一对象，两个空数组互不相关，因此都是false</p><h4 id="undefined-undefined-undefined-undefined？"><a href="#undefined-undefined-undefined-undefined？" class="headerlink" title="undefined == undefined, undefined === undefined？"></a>undefined == undefined, undefined === undefined？</h4><p>&emsp;&emsp;undefined == undefined, undefined === undefined 都是true，因为undefined在JS是基本类型，也就是值类型，且只有一个值，所以无论是值和类型都是相等的。</p><h4 id="JS的作用域有几种？-是不是作用域？"><a href="#JS的作用域有几种？-是不是作用域？" class="headerlink" title="JS的作用域有几种？{}是不是作用域？"></a>JS的作用域有几种？{}是不是作用域？</h4><p>&emsp;&emsp;通常来说，作用域被分为全局作用域和局部作用域，全局作用域就是在代码块之外的部分，而局部作用域在ES6之前是只有函数作用域一种的，而且在函数作用域中声明变量时，必须使用var关键字，否则会因为变量提升成为全局变量。ES6，引入了let和const，拥有块级作用域（局部作用域）了，因此{}代码块是作用域(ES6)，而ES5中只有{}是函数的时候才算做作用域</p><h4 id="DOM事件绑定的几种方式（尤其是DOM0和DOM2）？"><a href="#DOM事件绑定的几种方式（尤其是DOM0和DOM2）？" class="headerlink" title="DOM事件绑定的几种方式（尤其是DOM0和DOM2）？"></a>DOM事件绑定的几种方式（尤其是DOM0和DOM2）？</h4><p>&emsp;&emsp;a. DOM元素中直接绑定；b. 在JS代码中使用属性绑定（DOM0级绑定）；c. 绑定事件监听函数（DOM2级绑定）<br>&emsp;&emsp;DOM0级事件处理程序（属性绑定，兼容性好）：将一个函数赋值给一个事件处理程序属性。特点：简单，跨浏览器。例如：btn.onclick = function() {xxx}, btn.onclick = null<br>&emsp;&emsp;DOM2级事件处理程序（函数绑定，兼容性不好）：使用addEventListener()和removeEventListener()来绑定和解绑事件的，可以处理多个事件处理程序，并按照顺序触发，移除事件和绑定事件传入的参数相同，绑定事件时使用匿名函数的话将无法移除<br>&emsp;&emsp;DOM0级事件会覆盖，DOM2不会覆盖，会依次执行，DOM0级和DOM2级可以共存，不会相互覆盖</p><h4 id="DOM事件中target和currentTarget的区别？"><a href="#DOM事件中target和currentTarget的区别？" class="headerlink" title="DOM事件中target和currentTarget的区别？"></a>DOM事件中target和currentTarget的区别？</h4><p>&emsp;&emsp;事件中target是一个触发事件的对象的引用，当事件处理程序在事件的冒泡或捕获阶段被调用；而currentTarget指的是当事件遍历DOM时，标识事件的当前目标<br>&emsp;&emsp;简言之，e.target指向触发事件监听的对象；e.currentTarget指向添加事件监听的对象。利用这两个特性，可以实现事件代理</p><h4 id="JS的事件流模型？"><a href="#JS的事件流模型？" class="headerlink" title="JS的事件流模型？"></a>JS的事件流模型？</h4><p>&emsp;&emsp;事件流描述的是从页面中接受事件的顺序<br>&emsp;&emsp;冒泡事件流：从事件开始的具体元素，一层层向上传播直到window<br>&emsp;&emsp;捕获事件流：捕获的顺序与冒泡刚好相反，是在事件到达目标之前捕获它，而最具体的节点是最后才接收到事件的<br>&emsp;&emsp;DOM事件流：DOM2级规定的事件流包括三个阶段 - 事件捕获阶段、处于目标阶段、事件冒泡阶段。即使DOM2级规定在捕获阶段不会涉及事件目标，但是由于浏览器支持，所以有两个机会在目标对象上操作事件</p><h4 id="普通函数和构造函数的区别？"><a href="#普通函数和构造函数的区别？" class="headerlink" title="普通函数和构造函数的区别？"></a>普通函数和构造函数的区别？</h4><p>&emsp;&emsp;a. 构造函数使用new关键字调用，而普通函数不需要<br>&emsp;&emsp;b. 构造函数内部可以使用this关键字，普通函数内部不建议使用this关键字，因为这时候this指向window全局对象，会无意间增加一些全局变量或函数<br>&emsp;&emsp;c. 构造函数首字母建议大写；普通函数首字母建议小写<br>&emsp;&emsp;d. 构造函数默认会返回this对象，不用显式return，而普通函数要想返回值需要return</p><h4 id="给定一个元素获取其相对于视图窗口的坐标？"><a href="#给定一个元素获取其相对于视图窗口的坐标？" class="headerlink" title="给定一个元素获取其相对于视图窗口的坐标？"></a>给定一个元素获取其相对于视图窗口的坐标？</h4><p>&emsp;&emsp;获取视口坐标可以通过调用元素的getBoundingClientRect()方法，方法返回的一个有left、right、top、bottom属性的对象，分别表示元素四个位置相对于视口的坐标。该方法返回的坐标包含元素的内边距和边框，不包含外边距。</p><h4 id="JS如何实现重载和多态？"><a href="#JS如何实现重载和多态？" class="headerlink" title="JS如何实现重载和多态？"></a>JS如何实现重载和多态？</h4><p>&emsp;&emsp;因为JS本身不支持重载的，所以有：a. 根据arguments个数实现重载，arguments检测传参的个数，然后在执行不同的方式；b. 检测数据类型实现重载，根据传参的数据类型，调用不同的方式，用typeof检测<br>&emsp;&emsp;多态：利用构造函数的prototype属性，来实现多态，代码示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function makeSound(animal) &#123;</span><br><span class="line">animal.sound();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Duck() &#123;&#125;</span><br><span class="line">function Chicken() &#123;&#125;</span><br><span class="line">Duck.prototype.sound = function() &#123;console.log(&apos;gagaga&apos;);&#125;</span><br><span class="line">Chicken.prototype.sound = function() &#123;console.log(&apos;gegege&apos;);&#125;</span><br><span class="line"></span><br><span class="line">var d = new Duck();</span><br><span class="line">var c = new Chicken();</span><br><span class="line">makeSound(d);</span><br><span class="line">makeSound(c);</span><br></pre></td></tr></table></figure></p><h4 id="内存泄漏的原因和场景？"><a href="#内存泄漏的原因和场景？" class="headerlink" title="内存泄漏的原因和场景？"></a>内存泄漏的原因和场景？</h4><p>&emsp;&emsp;内存泄漏就是不再被需要的内存，由于某种原因，无法释放<br>&emsp;&emsp;a. 全局变量造成内存泄漏<br>&emsp;&emsp;b. 闭包造成内存泄漏<br>&emsp;&emsp;c. 未销毁的定时器和回调函数造成内存泄漏<br>&emsp;&emsp;d. DOM引用造成内存泄漏</p><h4 id="JS中的事件循环￼？"><a href="#JS中的事件循环￼？" class="headerlink" title="JS中的事件循环￼？"></a>JS中的<a href="https://juejin.im/post/5ddaa00f5188257338075a2e" target="_blank" rel="noopener">事件循环</a>￼？</h4><p>&emsp;&emsp;事件循环机制 = JS异步执行机制</p><h4 id="for…in和forEach的使用场景？"><a href="#for…in和forEach的使用场景？" class="headerlink" title="for…in和forEach的使用场景？"></a>for…in和forEach的使用场景？</h4><p>&emsp;&emsp;forEach循环缺点就是中途无法跳出，但是在多数情况下是遍历数组的首选<br>&emsp;&emsp;for…in遍历数组的缺点：<br>&emsp;&emsp;a. 数组键名通常是数字，而for…in是以字符串作为键名的，如果使用数组的index参与了运算，可能会得到预期不符的结果<br>&emsp;&emsp;b. for…in不仅会遍历数组的键名，还会遍历其他手动添加的键，甚至原型链上的键<br>&emsp;&emsp;c. 某些情况下，for…in循环会以任意顺序遍历键名<br>&emsp;&emsp;总之，for…in适合遍历对象，而非数组</p><h4 id="手指点击触控屏是什么事件？"><a href="#手指点击触控屏是什么事件？" class="headerlink" title="手指点击触控屏是什么事件？"></a><a href="https://juejin.im/post/6844903834075021326" target="_blank" rel="noopener">手指点击触控屏</a>是什么事件？</h4><p>&emsp;&emsp;触摸事件：touchstart, touchmove, touchend (最常用的前三个), touchcancel</p><h3 id="文章引用和推荐"><a href="#文章引用和推荐" class="headerlink" title="文章引用和推荐"></a>文章引用和推荐</h3><ol><li><a href="https://juejin.im/post/5ac1f1106fb9a028be362731" target="_blank" rel="noopener">面试中会遇到的正则题</a> 来自呆头呆脑丶的掘金</li><li><a href="https://juejin.im/post/5b684f30f265da0f9f4e87cf" target="_blank" rel="noopener">javascript垃圾回收机制</a> 来自李赫feixuan的掘金</li><li><a href="https://juejin.im/post/5d28374951882564ca686ef2" target="_blank" rel="noopener">JavaScript之继承的多种方式和优缺点</a> 来自老詹啊的掘金</li><li><a href="https://www.jianshu.com/p/1a8a7e698447" target="_blank" rel="noopener">window.onload和DOMContentLoaded 的区别</a> 来自初入前端的小菜鸟的简书</li><li><a href="https://juejin.im/post/5ddaa00f5188257338075a2e" target="_blank" rel="noopener">面试之万能答案：事件循环</a> 来自蔓越莓的掘金</li><li><a href="https://juejin.im/post/6844903834075021326" target="_blank" rel="noopener">移动端手势库设计与实践</a> 来自连城的掘金</li><li><a href="https://juejin.im/post/6844903834075021326" target="_blank" rel="noopener">你真的理解事件冒泡和事件捕获吗？</a> 来自Coderfei的掘金</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/Interview-Questions/frontend-interview-js/js.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; alt=&quot;git&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Interview Questions" scheme="http://yoursite.com/categories/Interview-Questions/"/>
    
    
      <category term="FrontEnd" scheme="http://yoursite.com/tags/FrontEnd/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>渐进式网络应用(Progressive Web Apps)</title>
    <link href="http://yoursite.com/Developer-Tools/pwa-basic/"/>
    <id>http://yoursite.com/Developer-Tools/pwa-basic/</id>
    <published>2020-06-09T19:35:17.000Z</published>
    <updated>2020-06-09T20:00:09.684Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/Developer-Tools/pwa-basic/pwa.png" width="100%" height="100%" alt="git"><br><a id="more"></a></p><h3 id="渐进式网络应用程序-PWA"><a href="#渐进式网络应用程序-PWA" class="headerlink" title="渐进式网络应用程序(PWA)"></a><a href="https://en.wikipedia.org/wiki/Progressive_web_application" target="_blank" rel="noopener">渐进式网络应用程序(PWA)</a></h3><h3 id="PWA主要组成技术"><a href="#PWA主要组成技术" class="headerlink" title="PWA主要组成技术"></a>PWA主要组成技术</h3><h4 id="Service-Worker-Core"><a href="#Service-Worker-Core" class="headerlink" title="Service Worker - Core"></a>Service Worker - Core</h4><p>服务工作线程 - 独立于页面，常驻内存运行；代理网络请求；依赖HTTPS</p><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><p>“承诺”控制流 - 优化JS回调问题；async/await语法同步化；Service Worker的API风格</p><h4 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h4><p>网络请求 - 比XMLHttpRequest更简洁；Promise风格；依旧有不足</p><h4 id="cache-API"><a href="#cache-API" class="headerlink" title="cache API"></a>cache API</h4><p>支持资源的缓存系统 - 缓存资源(css/scripts/image)；依赖Service Worker代理网络请求；支持离线程序运行</p><h4 id="Notification-API"><a href="#Notification-API" class="headerlink" title="Notification API"></a>Notification API</h4><p>消息推送 - 依赖用户授权；适合在Service Worker中推送</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/Developer-Tools/pwa-basic/pwa.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; alt=&quot;git&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Developer Tools" scheme="http://yoursite.com/categories/Developer-Tools/"/>
    
    
      <category term="PWA" scheme="http://yoursite.com/tags/PWA/"/>
    
  </entry>
  
  <entry>
    <title>并查集(Union Find)</title>
    <link href="http://yoursite.com/Data-Structure/union-find/"/>
    <id>http://yoursite.com/Data-Structure/union-find/</id>
    <published>2020-05-30T09:39:55.000Z</published>
    <updated>2020-05-31T03:05:12.088Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/Data-Structure/union-find/unionfind.png" width="100%" height="100%" alt="git"><br><a id="more"></a></p><h3 id="并查集的定义"><a href="#并查集的定义" class="headerlink" title="并查集的定义"></a>并查集的定义</h3><p>&emsp;&emsp;一种不一样的树形结构，其子节点指向父节点(树通常是父节点指向子节点)。<br>&emsp;&emsp;对于一组数据，主要支持两个动作:<br>&emsp;&emsp;union(p,q) 合并p和q两组数据及其集合<br>&emsp;&emsp;isConnected(p,q) 查询p和q两组数据是否属于同一集合</p><h3 id="并查集的应用-连接问题-Connectivity-Problem"><a href="#并查集的应用-连接问题-Connectivity-Problem" class="headerlink" title="并查集的应用: 连接问题(Connectivity Problem)"></a>并查集的应用: 连接问题(Connectivity Problem)</h3><p>&emsp;&emsp;连接问题和路径问题: 存在路径/不存在 = 连接/不连接<br>&emsp;&emsp;但，连接问题比路径问题要回答的内容少，连接回答是否连接，而路径问题需要完整路径</p><h4 id="经典问题之一：“网络”中节点间的连接状态"><a href="#经典问题之一：“网络”中节点间的连接状态" class="headerlink" title="经典问题之一：“网络”中节点间的连接状态"></a>经典问题之一：“网络”中节点间的连接状态</h4><h4 id="经典问题之二：数学中集合类的实现-求并集"><a href="#经典问题之二：数学中集合类的实现-求并集" class="headerlink" title="经典问题之二：数学中集合类的实现(求并集)"></a>经典问题之二：数学中集合类的实现(求并集)</h4><h3 id="代码实现-Java"><a href="#代码实现-Java" class="headerlink" title="代码实现(Java)"></a>代码实现(Java)</h3><p>&emsp;&emsp;👇先定义接口，然后使用不同底层数据结构来实现并查集<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface UF &#123;</span><br><span class="line">    int getSize();</span><br><span class="line">    boolean isConnected(int p, int q);  // id为p，id为q的两组数据</span><br><span class="line">    void unionElements(int p, int q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Union-Find-I-Quick-Find"><a href="#Union-Find-I-Quick-Find" class="headerlink" title="Union Find I - Quick Find"></a>Union Find I - Quick Find</h4><p>&emsp;&emsp;使用一个id数组来存储不同数据所在的集合id<br>&emsp;&emsp;查找O(1)，合并O(n)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public class UnionFind1 implements UF &#123;</span><br><span class="line"></span><br><span class="line">    private int[] id;   // id数组</span><br><span class="line"></span><br><span class="line">    public UnionFind1(int size) &#123;</span><br><span class="line">        id = new int[size];</span><br><span class="line">        for (int i = 0 ; i &lt; size ; i++) &#123;</span><br><span class="line">            id[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getSize() &#123;</span><br><span class="line">        return id.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 查看元素p和q是否同属一个集合</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isConnected(int p, int q) &#123;</span><br><span class="line">        return find(p) == find(q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 合并元素p和q的集合</span><br><span class="line">    @Override</span><br><span class="line">    public void unionElements(int p, int q) &#123;</span><br><span class="line">        int pID = find(p);</span><br><span class="line">        int qID = find(q);</span><br><span class="line">        if (pID == qID) return;</span><br><span class="line">        for (int i = 0 ; i &lt; id.length ; i++) &#123;</span><br><span class="line">            if (id[i] == pID) &#123;</span><br><span class="line">                id[i] = qID;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 查找元素p所对应的集合编号</span><br><span class="line">    private int find(int p) &#123;</span><br><span class="line">        if (p &lt; 0 || p &gt;= id.length) throw new IllegalArgumentException(&quot;out of bound&quot;);</span><br><span class="line">        return id[p];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Union-Find-II-Quick-Union"><a href="#Union-Find-II-Quick-Union" class="headerlink" title="Union Find II - Quick Union"></a>Union Find II - Quick Union</h4><p>&emsp;&emsp;将每一个元素，看做是一个节点，用数组实现子节点指向父节点的思想<br>&emsp;&emsp;parent数组代表每个元素的父节点(最终形成的是个森林)<br>&emsp;&emsp;查找O(h)，合并O(h)，h是对应元素所在树的深度，通常比数据总量n要小，但没有具体的log关系，因为树的分支是不确定的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public class UnionFind2 implements UF &#123;</span><br><span class="line"></span><br><span class="line">    private int[] parent;   // parent数组</span><br><span class="line"></span><br><span class="line">    public UnionFind1(int size) &#123;</span><br><span class="line">        parent = new int[size];</span><br><span class="line">        for (int i = 0 ; i &lt; size ; i++) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getSize() &#123;</span><br><span class="line">        return parent.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 查看元素p和q是否同属一个集合</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isConnected(int p, int q) &#123;</span><br><span class="line">        return find(p) == find(q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 合并元素p和q的集合，O(h)</span><br><span class="line">    @Override</span><br><span class="line">    public void unionElements(int p, int q) &#123;</span><br><span class="line">        int pRoot = find(p);</span><br><span class="line">        int qRoot = find(q);</span><br><span class="line">        if (pRoot == qRoot) return;</span><br><span class="line">        parent[pRoot] = qRoot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 查找元素p所对应的集合编号，O(h)</span><br><span class="line">    private int find(int p) &#123;</span><br><span class="line">        if (p &lt; 0 || p &gt;= id.length) throw new IllegalArgumentException(&quot;out of bound&quot;);</span><br><span class="line">        while (p != parent[p]) &#123;</span><br><span class="line">            p = parent[p];</span><br><span class="line">        &#125;</span><br><span class="line">        return p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Union-Find-III-基于size的优化"><a href="#Union-Find-III-基于size的优化" class="headerlink" title="Union Find III - 基于size的优化"></a>Union Find III - 基于size的优化</h4><p>&emsp;&emsp;在UnionFindII中，合并元素时可能会导致树退化成链表，性能无法保证<br>&emsp;&emsp;因此，为了防止此类情况，合并时采取将节点数量少的树的根节点指向节点数量多的树的根节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">public class UnionFind3 implements UF &#123;</span><br><span class="line"></span><br><span class="line">    private int[] parent;   // parent数组</span><br><span class="line">    private int[] sz;       // sz[i]表示以i为根的集合中元素个数</span><br><span class="line"></span><br><span class="line">    public UnionFind3(int size) &#123;</span><br><span class="line">        parent = new int[size];</span><br><span class="line">        sz = new int[size];</span><br><span class="line">        for (int i = 0 ; i &lt; size ; i++) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">            sz[i] = 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getSize() &#123;</span><br><span class="line">        return parent.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 查看元素p和q是否同属一个集合</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isConnected(int p, int q) &#123;</span><br><span class="line">        return find(p) == find(q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 合并元素p和q的集合，O(h)</span><br><span class="line">    @Override</span><br><span class="line">    public void unionElements(int p, int q) &#123;</span><br><span class="line">        int pRoot = find(p);</span><br><span class="line">        int qRoot = find(q);</span><br><span class="line">        if (pRoot == qRoot) return;</span><br><span class="line"></span><br><span class="line">        // 根据两个元素所在树的元素个数不同判断合并的方向</span><br><span class="line">        // 将元素少的集合合并到元素多的集合</span><br><span class="line">        if (sz[pRoot] &lt; sz[qRoot]) &#123;</span><br><span class="line">            parent[pRoot] = qRoot;</span><br><span class="line">            sz[qRoot] += sz[pRoot];</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            parent[qRoot] = pRoot;</span><br><span class="line">            sz[pRoot] += sz[qRoot];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 查找元素p所对应的集合编号，O(h)</span><br><span class="line">    private int find(int p) &#123;</span><br><span class="line">        if (p &lt; 0 || p &gt;= id.length) throw new IllegalArgumentException(&quot;out of bound&quot;);</span><br><span class="line">        while (p != parent[p]) &#123;</span><br><span class="line">            p = parent[p];</span><br><span class="line">        &#125;</span><br><span class="line">        return p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Union-Find-IV-基于rank的优化"><a href="#Union-Find-IV-基于rank的优化" class="headerlink" title="Union Find IV - 基于rank的优化"></a>Union Find IV - 基于rank的优化</h4><p>&emsp;&emsp;在UnionFindIII中，合并元素时虽然已经大大改善了链表情况，但是仍存在节点数量少的集合树却有着较高的深度<br>&emsp;&emsp;因此需要引入基于rank(树的深度/高度)的优化，合并时将深度低的指向深度高的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">public class UnionFind4 implements UF &#123;</span><br><span class="line"></span><br><span class="line">    private int[] parent;   // parent数组</span><br><span class="line">    private int[] rank;     // rank[i]表示以i为根的集合树的深度</span><br><span class="line"></span><br><span class="line">    public UnionFind4(int size) &#123;</span><br><span class="line">        parent = new int[size];</span><br><span class="line">        rank = new int[size];</span><br><span class="line">        for (int i = 0 ; i &lt; size ; i++) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">            rank[i] = 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getSize() &#123;</span><br><span class="line">        return parent.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 查看元素p和q是否同属一个集合</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isConnected(int p, int q) &#123;</span><br><span class="line">        return find(p) == find(q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 合并元素p和q的集合，O(h)</span><br><span class="line">    @Override</span><br><span class="line">    public void unionElements(int p, int q) &#123;</span><br><span class="line">        int pRoot = find(p);</span><br><span class="line">        int qRoot = find(q);</span><br><span class="line">        if (pRoot == qRoot) return;</span><br><span class="line"></span><br><span class="line">        // 根据两个元素所在树的深度不同判断合并的方向</span><br><span class="line">        // 将深度小的集合合并到深度大的集合</span><br><span class="line">        if (rank[pRoot] &lt; rank[qRoot]) &#123;</span><br><span class="line">            parent[pRoot] = qRoot;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (rank[qRoot] &lt; rank[pRoot]) &#123;</span><br><span class="line">            parent[qRoot] = pRoot;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            parent[pRoot] = qRoot;</span><br><span class="line">            rank[qRoot]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 查找元素p所对应的集合编号，O(h)</span><br><span class="line">    private int find(int p) &#123;</span><br><span class="line">        if (p &lt; 0 || p &gt;= id.length) throw new IllegalArgumentException(&quot;out of bound&quot;);</span><br><span class="line">        while (p != parent[p]) &#123;</span><br><span class="line">            p = parent[p];</span><br><span class="line">        &#125;</span><br><span class="line">        return p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Union-Find-V-简易路径压缩-非递归"><a href="#Union-Find-V-简易路径压缩-非递归" class="headerlink" title="Union Find V - 简易路径压缩(非递归)"></a>Union Find V - 简易路径压缩(非递归)</h4><p>&emsp;&emsp;在树结构的并查集中，为了效率，我们希望树的深度越小越好<br>&emsp;&emsp;因此可以采用路径压缩，在find过程中进行路径压缩<br>&emsp;&emsp;时间复杂度: 严格意义上，O(log * n) -&gt; iterated logarithm &lt;&lt; O(logn)，近乎O(1)级别<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">public class UnionFind5 implements UF &#123;</span><br><span class="line"></span><br><span class="line">    private int[] parent;   // parent数组</span><br><span class="line">    private int[] rank;     // rank[i]表示以i为根的集合树的深度</span><br><span class="line"></span><br><span class="line">    public UnionFind5(int size) &#123;</span><br><span class="line">        parent = new int[size];</span><br><span class="line">        rank = new int[size];</span><br><span class="line">        for (int i = 0 ; i &lt; size ; i++) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">            rank[i] = 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getSize() &#123;</span><br><span class="line">        return parent.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 查看元素p和q是否同属一个集合</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isConnected(int p, int q) &#123;</span><br><span class="line">        return find(p) == find(q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 合并元素p和q的集合，O(h)</span><br><span class="line">    @Override</span><br><span class="line">    public void unionElements(int p, int q) &#123;</span><br><span class="line">        int pRoot = find(p);</span><br><span class="line">        int qRoot = find(q);</span><br><span class="line">        if (pRoot == qRoot) return;</span><br><span class="line"></span><br><span class="line">        // 根据两个元素所在树的深度不同判断合并的方向</span><br><span class="line">        // 将深度小的集合合并到深度大的集合</span><br><span class="line">        if (rank[pRoot] &lt; rank[qRoot]) &#123;</span><br><span class="line">            parent[pRoot] = qRoot;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (rank[qRoot] &lt; rank[pRoot]) &#123;</span><br><span class="line">            parent[qRoot] = pRoot;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            parent[pRoot] = qRoot;</span><br><span class="line">            rank[qRoot]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 查找元素p所对应的集合编号，O(h)</span><br><span class="line">    private int find(int p) &#123;</span><br><span class="line">        if (p &lt; 0 || p &gt;= id.length) throw new IllegalArgumentException(&quot;out of bound&quot;);</span><br><span class="line">        while (p != parent[p]) &#123;</span><br><span class="line">            parent[p] = parent[parent[p]];  // 简易路径压缩，将该节点的父节点改为其“爷爷”节点</span><br><span class="line">                                            // 因此每次find，都会减少树的深度</span><br><span class="line">                                            // 这里，没有必要去维护rank数组，在IV中我们定义rank</span><br><span class="line">                                            // 为树的深度，而此时rank可以代表相对排名</span><br><span class="line">            p = parent[p];</span><br><span class="line">        &#125;</span><br><span class="line">        return p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Union-Find-VI-递归路径压缩-find"><a href="#Union-Find-VI-递归路径压缩-find" class="headerlink" title="Union Find VI - 递归路径压缩(find)"></a>Union Find VI - 递归路径压缩(find)</h4><p>&emsp;&emsp;在UnionFindV中，采用了简易路径压缩，每一次find都有很大可能导致新的路径压缩<br>&emsp;&emsp;因此可以采用递归路径压缩，尽可能减少find时路径压缩的次数，但不代表性能的提升<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">public class UnionFind6 implements UF &#123;</span><br><span class="line"></span><br><span class="line">    private int[] parent;   // parent数组</span><br><span class="line">    private int[] rank;     // rank[i]表示以i为根的集合树的深度</span><br><span class="line"></span><br><span class="line">    public UnionFind6(int size) &#123;</span><br><span class="line">        parent = new int[size];</span><br><span class="line">        rank = new int[size];</span><br><span class="line">        for (int i = 0 ; i &lt; size ; i++) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">            rank[i] = 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getSize() &#123;</span><br><span class="line">        return parent.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 查看元素p和q是否同属一个集合</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isConnected(int p, int q) &#123;</span><br><span class="line">        return find(p) == find(q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 合并元素p和q的集合，O(h)</span><br><span class="line">    @Override</span><br><span class="line">    public void unionElements(int p, int q) &#123;</span><br><span class="line">        int pRoot = find(p);</span><br><span class="line">        int qRoot = find(q);</span><br><span class="line">        if (pRoot == qRoot) return;</span><br><span class="line"></span><br><span class="line">        // 根据两个元素所在树的深度不同判断合并的方向</span><br><span class="line">        // 将深度小的集合合并到深度大的集合</span><br><span class="line">        if (rank[pRoot] &lt; rank[qRoot]) &#123;</span><br><span class="line">            parent[pRoot] = qRoot;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (rank[qRoot] &lt; rank[pRoot]) &#123;</span><br><span class="line">            parent[qRoot] = pRoot;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            parent[pRoot] = qRoot;</span><br><span class="line">            rank[qRoot]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 查找元素p所对应的集合编号，O(h)</span><br><span class="line">    private int find(int p) &#123;</span><br><span class="line">        if (p &lt; 0 || p &gt;= id.length) throw new IllegalArgumentException(&quot;out of bound&quot;);</span><br><span class="line">        // 递归路径压缩</span><br><span class="line">        if (p != parent[p]) &#123;</span><br><span class="line">            parent[p] = find(parent[p]);</span><br><span class="line">        &#125;</span><br><span class="line">        return parent[p];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/Data-Structure/union-find/unionfind.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; alt=&quot;git&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/Data-Structure/"/>
    
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
      <category term="Union Find" scheme="http://yoursite.com/tags/Union-Find/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes基础</title>
    <link href="http://yoursite.com/Developer-Tools/kubernetes-basic/"/>
    <id>http://yoursite.com/Developer-Tools/kubernetes-basic/</id>
    <published>2020-04-27T12:42:23.000Z</published>
    <updated>2020-05-17T18:16:00.599Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/Developer-Tools/kubernetes-basic/Kubernetes.png" width="100%" height="100%" alt="git"><br><a id="more"></a></p><h3 id="Kubernetes-k8s"><a href="#Kubernetes-k8s" class="headerlink" title="Kubernetes (k8s)"></a>Kubernetes (k8s)</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>面向云原生应用 - 以Google Borg(Google内部容器管理平台)为原型重新设计和实现的容器管理和编排调用工具。</p><h4 id="云原生模式"><a href="#云原生模式" class="headerlink" title="云原生模式"></a>云原生模式</h4><p>随着容器技术的出现以及应用面临的外部环境变化，云原生成为一种应用云化开发、部署和运行的主流方式。<br>容器 - 应用部署、运行和管理的基本单元<br>基础 - 应用的容器化和微服务化<br>核心 - 借助容器管理自动化平台进行动态编排和资源优化利用</p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>容器编排管理平台、微服务支撑平台、可移植的“云平台”</p><h3 id="Kubernetes基本概念"><a href="#Kubernetes基本概念" class="headerlink" title="Kubernetes基本概念"></a>Kubernetes基本概念</h3><h4 id="Pods"><a href="#Pods" class="headerlink" title="Pods"></a>Pods</h4><p>一个pod是k8s中应用的最小单元，pod可以由多个容器组成，有如下特性:<br>1.单一IP地址<br>2.共享localhost<br>3.共享网络端口<br>4.共享卷(volumes)<br>5.共享IPC(inter-process communication)空间<br>在pod中的容器是通过localhost进行通信，而pod之间的通信是由services来实现的。</p><h4 id="ReplicaSets"><a href="#ReplicaSets" class="headerlink" title="ReplicaSets"></a>ReplicaSets</h4><p>由于pods具有非永恒性(如果终止，便代表结束)，那么我们如何处理同个pod的多个版本运行？<br>引入了replication controller，该控制器位于pod资源类型的上层来对其进行控制，可以有效防止失败/错误的发生；<br>由此有了replica set，代表指定数量的需要运行的pods的集合。</p><h4 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h4><p>在k8s中，一个服务(service)是pods之间通信的基础，就像pods之间的网络抽象。<br>注：服务允许k8s为pods设置单一的DNS记录。</p><h4 id="Deployments"><a href="#Deployments" class="headerlink" title="Deployments"></a>Deployments</h4><p>部署资源类型(deployment resource type)位于replica set的上层操作。<br>一般来说，升级需要替换整个replica set，这样会导致应用停机进行升级；因此，k8s采用滚动升级(rolling upgrade), 使得我们可以不用停机就可以进行升级。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Deployments控制replica sets，然后replica sets控制pods。<br>注意：使用部署资源类型时仍然需要用服务访问。</p><h3 id="k8s相关工具"><a href="#k8s相关工具" class="headerlink" title="k8s相关工具"></a>k8s相关工具</h3><h4 id="Install-and-Set-Up-kubectl"><a href="#Install-and-Set-Up-kubectl" class="headerlink" title="Install and Set Up kubectl"></a><a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-on-macos" target="_blank" rel="noopener">Install and Set Up kubectl</a></h4><p>Kubernetes命令行工具，允许用户使用指令来管理k8s集群。</p><h4 id="Install-Minikube"><a href="#Install-Minikube" class="headerlink" title="Install Minikube"></a><a href="https://kubernetes.io/docs/tasks/tools/install-minikube/" target="_blank" rel="noopener">Install Minikube</a></h4><p>Minikube是为了开发者能在个人电脑上运行k8s而提供的一套工具，Go语言编写，通过调用虚拟化管理程序，创建出一个运行在虚拟机内的单节点集群。</p><h4 id="VM-driver-documentation"><a href="#VM-driver-documentation" class="headerlink" title="VM driver documentation"></a><a href="https://kubernetes.io/docs/setup/learning-environment/minikube/#specifying-the-vm-driver" target="_blank" rel="noopener">VM driver documentation</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube start --driver=&lt;driver_name&gt;</span><br></pre></td></tr></table></figure><p>👆Enter the name of the hypervisor you installed in lowercase letters where &lt;driver_name&gt; is mentioned below.<br>Driver is <a href="https://minikube.sigs.k8s.io/docs/drivers/docker/" target="_blank" rel="noopener">Docker</a></p><h3 id="推荐文章"><a href="#推荐文章" class="headerlink" title="推荐文章"></a>推荐文章</h3><ol><li><a href="https://www.kubernetes.org.cn/5025.html" target="_blank" rel="noopener">kubernetes1.13.1+etcd3.3.10+flanneld0.10集群部署</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/Developer-Tools/kubernetes-basic/Kubernetes.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; alt=&quot;git&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Developer Tools" scheme="http://yoursite.com/categories/Developer-Tools/"/>
    
    
      <category term="Kubernetes" scheme="http://yoursite.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>简单介绍 - Docker和ElasticSearch</title>
    <link href="http://yoursite.com/Developer-Tools/docker-and-elastic/"/>
    <id>http://yoursite.com/Developer-Tools/docker-and-elastic/</id>
    <published>2020-04-19T07:54:24.000Z</published>
    <updated>2020-04-24T04:54:17.146Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/Developer-Tools/docker-and-elastic/elastic.png" width="100%" height="100%" alt="git"><br><a id="more"></a></p><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>容器引擎，能够打包/发布应用程序，包括系统环境、配置、依赖；虚拟化，沙箱机制(“轻量级虚拟机”)；Go语言编写。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener">下载安装包并安装</a></p><h4 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h4><p>host: 宿主机(正在使用Docker的机器)<br>image: 镜像(可以从远端拉取或者本地构建的可重复使用的软件打包)<br>container: 镜像运行时的容器<br>registry: 镜像的注册仓库<br>daemon: Docker的守护进程，用来接受用户命令、和registry共享<br>client: 客户端(给daemon输送命令)</p><h4 id="Run-it-Terminal-Command"><a href="#Run-it-Terminal-Command" class="headerlink" title="Run it (Terminal Command)"></a>Run it (Terminal Command)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p>👆我们可以看到Client和Server的信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure></p><p>👆hello from docker，我们可以看到docker运行流程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it alpine sh</span><br></pre></td></tr></table></figure></p><p>👆docker run是运行，-it是输入输出重定向，alpine是最小Linux镜像，sh是shell命令(ubuntu -&gt; bash)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></p><p>👆查看已经获取的本地镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></p><p>👆列出当前正在运行的容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker image rm &lt;image id&gt; [&lt;image id&gt; ...]</span><br><span class="line">docker rmi &lt;image id&gt;</span><br></pre></td></tr></table></figure></p><p>👆移除获取的本地镜像(需要先移除对应的容器)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm &lt;container id&gt; [&lt;container id&gt; ...]</span><br></pre></td></tr></table></figure></p><p>👆移除获取的容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 nginx</span><br></pre></td></tr></table></figure></p><p>👆-d代表程序直接返回(后端持续运行，作为指挥进程)，由于nginx是一个网络服务器，-p 8080:80是将nginx的端口(80)映射到我们的本地端口(8080)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop &lt;container id&gt;</span><br></pre></td></tr></table></figure></p><p>👆终止已经启动的容器(id)</p><h4 id="Modify-and-Commit"><a href="#Modify-and-Commit" class="headerlink" title="Modify and Commit"></a>Modify and Commit</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp &lt;file&gt; &lt;container id&gt;://path</span><br></pre></td></tr></table></figure><p>👆向容器中拷贝文件file(暂时性：如果不commit，这种修改只存在于容器运行阶段)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m &lt;msg&gt; &lt;container id&gt; [name]</span><br></pre></td></tr></table></figure></p><p>👆保存改动为新的image，命令会返回该image id，省略name参数则name为<none></none></p><h4 id="Create-Image-Dockerfile"><a href="#Create-Image-Dockerfile" class="headerlink" title="Create Image (Dockerfile)"></a>Create Image (Dockerfile)</h4><p>首先在想要打包的项目根目录下创建一个Dockerfile，然后用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t &lt;tag&gt; .</span><br></pre></td></tr></table></figure></p><p>👆创建image，-t代表tag，’.’代表当前路径下的所有文件</p><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><h5 id="语法小结"><a href="#语法小结" class="headerlink" title="语法小结"></a>语法小结</h5><p>FROM: base image<br>RUN: 执行命令<br>ADD: 添加文件（比COPY更强大些，包括远程文件）<br>COPY: 拷贝文件<br>CMD: 执行命令<br>EXPOSE: 暴露端口<br>WORKDIR: 指定路径<br>MAINTAINER: 维护者<br>ENV: 设定环境变量<br>ENTRYPOINT: 容器入口<br>USER: 指定用户<br>VOLUME: mount point(提供独立于<strong>容器</strong>之外的<strong>持久化</strong>存储)</p><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><p>👇示例1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine:latest</span><br><span class="line">MAINTAINER rl</span><br><span class="line">CMD echo &quot;Hello, Docker~&quot;</span><br></pre></td></tr></table></figure></p><p>👇示例2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">MAINTAINER rl</span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y nginx</span><br><span class="line">COPY index.html /var/www/html</span><br><span class="line">ENTRYPOINT [&quot;/user/sbin/nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</span><br><span class="line">EXPOSE 80</span><br></pre></td></tr></table></figure></p><h4 id="Volume-挂载"><a href="#Volume-挂载" class="headerlink" title="Volume(挂载)"></a>Volume(挂载)</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name nginx -v /usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure><p>👆挂载，/usr/share/nginx/html代表容器内部的地址(nginx用来访问网页)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect nginx</span><br></pre></td></tr></table></figure></p><p>👆检查信息，可以在返回结果中查找到”Mounts”下的”Source”，即是在宿主机上的挂载点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">screen ~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/tty</span><br><span class="line">/* If using Mac OS High Sierra */</span><br><span class="line">screen ~/Library/Containers/com.docker.docker/Data/vms/0/tty</span><br></pre></td></tr></table></figure></p><p>👆该指令只针对MAC(Linux无需该步骤)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /var/lib/docker/volumes/7c1601548c5adbd50e5bee2692939fb11bb5a52db52bb2ad1174c972b9550ec8/_data</span><br></pre></td></tr></table></figure></p><p>👆Go to volume path(示例)</p><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 -v $PWD/html:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure><p>👆$PWD是环境变量，指向Host当前目录</p><h5 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker create -v $PWD/data:/var/mydata --name data_container ubuntu</span><br></pre></td></tr></table></figure><p>👆创建数据目录挂载与本地的挂载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --volumes-from data_container ubuntu /bin/bash</span><br></pre></td></tr></table></figure></p><p>👆进入到Docker容器内部去对数据进行修改，同时可以看到本地也会进行相应修改</p><h4 id="Registry-镜像仓库-共享资源"><a href="#Registry-镜像仓库-共享资源" class="headerlink" title="Registry(镜像仓库) - 共享资源"></a>Registry(镜像仓库) - 共享资源</h4><p>官方仓库(Docker Hub)，国内的一些仓库(daocloud，时速云，aliyun)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker search &lt;image&gt;</span><br><span class="line">docker pull &lt;image&gt;</span><br><span class="line">docker push &lt;image&gt;</span><br><span class="line">docker tag &lt;old_image&gt; &lt;new_image&gt;</span><br></pre></td></tr></table></figure></p><p>👆搜索、拉取、发布、改变image的名字</p><h4 id="docker-compose-多容器app"><a href="#docker-compose-多容器app" class="headerlink" title="docker-compose(多容器app)"></a>docker-compose(多容器app)</h4><h5 id="Linux环境下安装docker-compose-Mac-Windows无需此步骤-详情请见"><a href="#Linux环境下安装docker-compose-Mac-Windows无需此步骤-详情请见" class="headerlink" title="Linux环境下安装docker-compose(Mac/Windows无需此步骤)详情请见"></a>Linux环境下安装docker-compose(Mac/Windows无需此步骤)<a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">详情请见</a></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line">sudo chmod a+x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h5 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br><span class="line">docker-compose stop</span><br><span class="line">docker-compose rm</span><br></pre></td></tr></table></figure><p>👆多容器app的image创建、daemon启动服务、停止、删除服务中的各个容器</p><h5 id="docker-compose-yml常用命令"><a href="#docker-compose-yml常用命令" class="headerlink" title="docker-compose.yml常用命令"></a>docker-compose.yml常用命令</h5><p>build 本地创建镜像<br>command 覆盖缺省命令<br>depends_on 连接容器<br>ports 暴露端口<br>volumes 卷<br>image 拉取镜像</p><h3 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>全文搜索引擎，能够快速储存、搜索和分析海量数据，通常可以满足大量站内搜索的需求，例如维基百科、Github、Stack Overflow。不需要建表、配置字段等；数据可以JSON格式存储；原生支持搜索，不需要拼装查询语句。</p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>方法一: 从网站下载安装包、配置、运行<br>方法二: 直接使用Docker拉取对应版本的elasticsearch<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull docker.elastic.co/elasticsearch/elasticsearch:7.6.2</span><br><span class="line">docker run -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; docker.elastic.co/elasticsearch/elasticsearch:7.6.2</span><br></pre></td></tr></table></figure></p><p>👆启动单点模式的elasticearch(可用于简单搜索)，端口9200</p><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p>&lt;server&gt;:9200/index/type/id<br>index -&gt; database<br>type -&gt; table<br>id -&gt; JSON obj<br>其中，index和type无需预先创建；type中的数据类型可以不一致。<br>在elasticsearch7中，为了解决不同type的字段重名问题，type概念被移除了。</p><h4 id="GET-PUT-POST-DELETE-REST"><a href="#GET-PUT-POST-DELETE-REST" class="headerlink" title="GET, PUT, POST, DELETE (REST)"></a>GET, PUT, POST, DELETE (REST)</h4><p>GET -&gt; &lt;server&gt;:9200/index/type/_search  表示搜索在当前index的type下的全部对象<br>GET -&gt; &lt;server&gt;:9200/index/type/_search?q=xxxxx  表示搜索在当前index的type下含有完整xxxxx的对象<br>GET -&gt; &lt;server&gt;:9200/index/type/_mapping  配置类型<br>PUT/POST -&gt; &lt;server&gt;:9200/index/type/id  创建/修改数据(不加id只能用POST来进行上传，id会随机分配)</p><h4 id="Coding-Go语言"><a href="#Coding-Go语言" class="headerlink" title="Coding (Go语言)"></a>Coding (Go语言)</h4><h5 id="Package-Managers-import-“github-com-olivere-elastic-v7”"><a href="#Package-Managers-import-“github-com-olivere-elastic-v7”" class="headerlink" title="Package Managers (import “github.com/olivere/elastic/v7”)"></a>Package Managers (import “github.com/olivere/elastic/v7”)</h5><p><a href="https://github.com/olivere/elastic" target="_blank" rel="noopener">👇(适合新手学习，非官方，抽象更简单)</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/olivere/elastic/v7</span><br></pre></td></tr></table></figure></p><h5 id="常用方法示例"><a href="#常用方法示例" class="headerlink" title="常用方法示例"></a>常用方法示例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// Creates a new elasticsearch client</span><br><span class="line">client, err := elastic.NewClient(</span><br><span class="line">// Must turn off sniff in docker</span><br><span class="line">elastic.SetSniff(false))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Stores the data (create/modify)</span><br><span class="line">resp, err := client.Index().</span><br><span class="line">Index(&quot;example&quot;).</span><br><span class="line">Type(&quot;exp&quot;).</span><br><span class="line">Id(&quot;1&quot;).</span><br><span class="line">BodyJson(item).</span><br><span class="line">Do(context.Background())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// Gets the data</span><br><span class="line">resp, err := client.Get().</span><br><span class="line">Index(&quot;example&quot;).</span><br><span class="line">Type(&quot;exp&quot;).</span><br><span class="line">Id(&quot;1&quot;).</span><br><span class="line">Do(context.Background())</span><br></pre></td></tr></table></figure><h3 id="版权所有"><a href="#版权所有" class="headerlink" title="版权所有"></a>版权所有</h3><p>&emsp;&emsp;仅供交流学习，禁止转载商用！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/Developer-Tools/docker-and-elastic/elastic.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; alt=&quot;git&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Developer Tools" scheme="http://yoursite.com/categories/Developer-Tools/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="ElasticSearch" scheme="http://yoursite.com/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>线段树/区间树(Segment Tree)</title>
    <link href="http://yoursite.com/Data-Structure/SegmentTree/"/>
    <id>http://yoursite.com/Data-Structure/SegmentTree/</id>
    <published>2019-07-15T06:04:30.000Z</published>
    <updated>2020-06-30T04:37:50.414Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/Data-Structure/SegmentTree/segment.png" width="100%" height="100%" alt="git"><br><a id="more"></a></p><h3 id="线段树的定义"><a href="#线段树的定义" class="headerlink" title="线段树的定义"></a>线段树的定义</h3><p>&emsp;&emsp;实质是二叉树(平衡但不完全)，但每一个节点都是一个区间(根据业务逻辑的定义)。例如求和，根结点就是所有的元素和，叶子结点就是一个元素的值。<br>&emsp;&emsp;如果区间内有n个元素，使用数组表示线段树，在一般不考虑添加元素的前提下，使用4n的静态空间即可。</p><h3 id="线段树的应用"><a href="#线段树的应用" class="headerlink" title="线段树的应用"></a>线段树的应用</h3><p>&emsp;&emsp;对于某一类问题，我们关心的是一段区间(线段)</p><h4 id="经典问题之一：区间染色"><a href="#经典问题之一：区间染色" class="headerlink" title="经典问题之一：区间染色"></a>经典问题之一：区间染色</h4><p>&emsp;&emsp;有一面长度为n的墙，每次选择一段墙进行染色。<br>&emsp;&emsp;1. m次操作后，我们可以看见多少种颜色?<br>&emsp;&emsp;2. m次操作后，我们在[i, j]区间内看见多少种颜色?<br>&emsp;&emsp;染色操作 = 更新区间，查询操作 = 查询区间</p><h4 id="经典问题之二：区间统计查询"><a href="#经典问题之二：区间统计查询" class="headerlink" title="经典问题之二：区间统计查询"></a>经典问题之二：区间统计查询</h4><p>&emsp;&emsp;查询一个区间[i, j]的最大值，最小值，或者区间数字和</p><h3 id="代码实现-Java"><a href="#代码实现-Java" class="headerlink" title="代码实现(Java)"></a>代码实现(Java)</h3><p>线段树实现:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">public class SegmentTree&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private E[] tree;</span><br><span class="line">    private E[] data;</span><br><span class="line">    private Merger&lt;E&gt; merger;</span><br><span class="line"></span><br><span class="line">    public SegmentTree(E[] arr, Merger&lt;E&gt; merger) &#123;</span><br><span class="line">    this.merger = merger;</span><br><span class="line"></span><br><span class="line">        data = (E[])new Object[arr.length];</span><br><span class="line">        for(int i = 0 ; i &lt; arr.length ; i ++)</span><br><span class="line">            data[i] = arr[i];</span><br><span class="line"></span><br><span class="line">        tree = (E[])new Object[4 * arr.length];</span><br><span class="line">        buildSegmentTree(0, 0, data.length - 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getSize() &#123;</span><br><span class="line">        return data.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 返回index位置上的元素</span><br><span class="line">    public E get(int index) &#123;</span><br><span class="line">    // 索引验证:</span><br><span class="line">        if(index &lt; 0 || index &gt;= data.length)</span><br><span class="line">            throw new IllegalArgumentException(&quot;Illegal Index&quot;);</span><br><span class="line">        return data[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 返回区间[queryL, queryR]的值</span><br><span class="line">    public E query(int queryL, int queryR) &#123;</span><br><span class="line"></span><br><span class="line">    // 合法性验证:</span><br><span class="line">        if (queryL &lt; 0 || queryL &gt;= data.length || queryR &lt; 0 || queryR &gt;= data.length || queryL &gt; queryR)</span><br><span class="line">            throw new IllegalArgumentException(&quot;Illegal Index&quot;);</span><br><span class="line"></span><br><span class="line">        return query(0, 0, data.length - 1, queryL, queryR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 将index位置的值，更新为e</span><br><span class="line">    public void set(int index, E e) &#123;</span><br><span class="line"></span><br><span class="line">        // 合法性验证:</span><br><span class="line">        if(index &lt; 0 || index &gt;= data.length)</span><br><span class="line">            throw new IllegalArgumentException(&quot;Illegal Index&quot;);</span><br><span class="line"></span><br><span class="line">        data[index] = e;</span><br><span class="line">        set(0, 0, data.length - 1, index, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 在treeIndex的位置创建表示区间[l...r]的线段树</span><br><span class="line">    private void buildSegmentTree(int treeIndex, int l, int r)&#123;</span><br><span class="line"></span><br><span class="line">        if (l == r) &#123;</span><br><span class="line">            tree[treeIndex] = data[l];</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int leftTreeIndex = leftChild(treeIndex);</span><br><span class="line">        int rightTreeIndex = rightChild(treeIndex);</span><br><span class="line"></span><br><span class="line">        // 实际上mid = (l + r) / 2, 防止整型溢出</span><br><span class="line">        int mid = l + (r - l) / 2;</span><br><span class="line">        buildSegmentTree(leftTreeIndex, l, mid);</span><br><span class="line">        buildSegmentTree(rightTreeIndex, mid + 1, r);</span><br><span class="line"></span><br><span class="line">        tree[treeIndex] = merger.merge(tree[leftTreeIndex], tree[rightTreeIndex]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 在以treeIndex为根的线段树中[l...r]的范围里，搜索区间[queryL...queryR]的值</span><br><span class="line">    private E query(int treeIndex, int l, int r, int queryL, int queryR) &#123;</span><br><span class="line"></span><br><span class="line">        if (l == queryL &amp;&amp; r == queryR)</span><br><span class="line">            return tree[treeIndex];</span><br><span class="line"></span><br><span class="line">        int mid = l + (r - l) / 2;</span><br><span class="line"></span><br><span class="line">        int leftTreeIndex = leftChild(treeIndex);</span><br><span class="line">        int rightTreeIndex = rightChild(treeIndex);</span><br><span class="line">        if (queryL &gt;= mid + 1)</span><br><span class="line">            return query(rightTreeIndex, mid + 1, r, queryL, queryR);</span><br><span class="line">        else if (queryR &lt;= mid)</span><br><span class="line">            return query(leftTreeIndex, l, mid, queryL, queryR);</span><br><span class="line"></span><br><span class="line">        E leftResult = query(leftTreeIndex, l, mid, queryL, mid);</span><br><span class="line">        E rightResult = query(rightTreeIndex, mid + 1, r, mid + 1, queryR);</span><br><span class="line">        return merger.merge(leftResult, rightResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 在以treeIndex为根的线段树中更新index的值为e</span><br><span class="line">    private void set(int treeIndex, int l, int r, int index, E e) &#123;</span><br><span class="line"></span><br><span class="line">        if(l == r)&#123;</span><br><span class="line">            tree[treeIndex] = e;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int mid = l + (r - l) / 2;</span><br><span class="line">        int leftTreeIndex = leftChild(treeIndex);</span><br><span class="line">        int rightTreeIndex = rightChild(treeIndex);</span><br><span class="line"></span><br><span class="line">        if (index &gt;= mid + 1)</span><br><span class="line">            set(rightTreeIndex, mid + 1, r, index, e);</span><br><span class="line">        else</span><br><span class="line">            set(leftTreeIndex, l, mid, index, e);</span><br><span class="line"></span><br><span class="line">        tree[treeIndex] = merger.merge(tree[leftTreeIndex], tree[rightTreeIndex]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 返回完全二叉树的数组表示中，一个索引所表示的元素的左孩子节点的索引</span><br><span class="line">    private int leftChild(int index)&#123;</span><br><span class="line">        return 2 * index + 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 返回完全二叉树的数组表示中，一个索引所表示的元素的右孩子节点的索引</span><br><span class="line">    private int rightChild(int index)&#123;</span><br><span class="line">        return 2 * index + 2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>融合器(接口):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Merger&lt;E&gt; &#123;</span><br><span class="line">    E merge(E a, E b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Main函数举例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        Integer[] nums = &#123;-2, 0, 3, -5, 2, -1&#125;;</span><br><span class="line">        SegmentTree&lt;Integer&gt; segTree = new SegmentTree&lt;&gt;(nums,</span><br><span class="line">             new Merger&lt;Integer&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public Integer merge(Integer a, Integer b) &#123;</span><br><span class="line">                        return a + b;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="版权所有"><a href="#版权所有" class="headerlink" title="版权所有"></a>版权所有</h3><p>&emsp;&emsp;本文所述的知识总结出自<a href="https://www.imooc.com/" target="_blank" rel="noopener">慕课网</a>课程 ——《算法大神带你玩转数据结构 从入门到精通》, 授课老师: liuyubobobo<br>&emsp;&emsp;仅供交流学习，禁止转载商用！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/Data-Structure/SegmentTree/segment.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; alt=&quot;git&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/Data-Structure/"/>
    
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
      <category term="Segment Tree" scheme="http://yoursite.com/tags/Segment-Tree/"/>
    
  </entry>
  
  <entry>
    <title>面试准备——BQ问题(三)</title>
    <link href="http://yoursite.com/Interview-Questions/bq3/"/>
    <id>http://yoursite.com/Interview-Questions/bq3/</id>
    <published>2019-06-30T11:58:25.000Z</published>
    <updated>2020-07-24T01:26:25.315Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/Interview-Questions/bq3/bq.jpg" width="100%" height="100%" alt="git"><br><a id="more"></a><br>&emsp;&emsp;<a href="https://cs-lurh.me/面经/bq1/" target="_blank" rel="noopener">BQ问题(一)</a>对应问题1-6。<br>&emsp;&emsp;<a href="https://cs-lurh.me/面经/bq2/" target="_blank" rel="noopener">BQ问题(二)</a>对应问题7-13。<br>&emsp;&emsp;PS: 仅供学习参考，请勿传播商用。</p><h3 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h3><h4 id="14-Is-there-a-time-when-you-saw-an-issue-that-would-impact-your-team-and-you-took-an-action-to-solve-it-你有没有发现过小组里某个隐藏的问题，并且积极采取行动去解决它？这个问题是什么？你做了什么？最后结果是什么？"><a href="#14-Is-there-a-time-when-you-saw-an-issue-that-would-impact-your-team-and-you-took-an-action-to-solve-it-你有没有发现过小组里某个隐藏的问题，并且积极采取行动去解决它？这个问题是什么？你做了什么？最后结果是什么？" class="headerlink" title="14. Is there a time when you saw an issue that would impact your team and you took an action to solve it? 你有没有发现过小组里某个隐藏的问题，并且积极采取行动去解决它？这个问题是什么？你做了什么？最后结果是什么？"></a>14. Is there a time when you saw an issue that would impact your team and you took an action to solve it? 你有没有发现过小组里某个隐藏的问题，并且积极采取行动去解决它？这个问题是什么？你做了什么？最后结果是什么？</h4><p>&emsp;&emsp;观点参考:问题可能一直都有的，在没有很好的解决方案之前可能保持现状更好。能提出更优化的方案，可以思考下老方案的形成背景是啥，为什么当时这么设计，为什么当时的设计不支持现在的业务了。有时候提出解决方案很容易，但是自己的解决方案是否完备，是否能够支持未来更多特性，是否给未来埋坑，这些点在实际工业场景才更重要。个人认为，仅仅解决问题其实只是修正bug而已，如果能说下前前后后自己的思考，并形成一套解决问题的思考逻辑框架，这些点才重要。填坑容易，填坑的同时怎么保证不引入新坑。这就需要详细了解前人设计的背景和出发点了。没有理解前人设计就去改动，很容易带来新坑。<br>&emsp;&emsp;举例:检查小组代码的时候发现了一个和业务逻辑有冲突的点，自己想好了解决方案之后跟老板、同事讨论，最后自己的方案被采纳后完成了修改。最后说一下学习和总结到了什么，下次team怎么能做的更好。</p><h4 id="15-We-don’t-always-make-the-right-judgment-all-the-time-Tell-me-about-a-time-when-you-made-an-error-in-judgment-你有没有做出错误判断的情况，你是怎么处理的呢"><a href="#15-We-don’t-always-make-the-right-judgment-all-the-time-Tell-me-about-a-time-when-you-made-an-error-in-judgment-你有没有做出错误判断的情况，你是怎么处理的呢" class="headerlink" title="15. We don’t always make the right judgment all the time. Tell me about a time when you made an error in judgment. 你有没有做出错误判断的情况，你是怎么处理的呢?"></a>15. We don’t always make the right judgment all the time. Tell me about a time when you made an error in judgment. 你有没有做出错误判断的情况，你是怎么处理的呢?</h4><p>&emsp;&emsp;该问题很容易，但是需要注意:::不要选择严重的错误，选个影响较低的错误。将回答重心放在如何解决，在这个过程中学到了什么，按照STAR法则来答。</p><h4 id="16-你有没有和其他组一起合作做项目，deadline已经很近了，但由于对方的问题，进展不顺利的情况？你是如何解决的？你学到了什么？"><a href="#16-你有没有和其他组一起合作做项目，deadline已经很近了，但由于对方的问题，进展不顺利的情况？你是如何解决的？你学到了什么？" class="headerlink" title="16. 你有没有和其他组一起合作做项目，deadline已经很近了，但由于对方的问题，进展不顺利的情况？你是如何解决的？你学到了什么？"></a>16. 你有没有和其他组一起合作做项目，deadline已经很近了，但由于对方的问题，进展不顺利的情况？你是如何解决的？你学到了什么？</h4><p>&emsp;&emsp;首先要保证自己的部分高质量完成，然后看看对方负责的任务自己有没有能力帮忙，有的话就帮忙做一下；没有的话需要跟manager沟通协调解决方案。需谨记:::与manage及时沟通很重要<br>&emsp;&emsp;用亚麻的方式说的话，就是积极take ownership，并且deliver result。</p><h4 id="17-Is-there-a-time-that-you-made-an-important-business-technical-decision-without-consulting-your-manager-你有没有自己做决定的，没有问manager的情况-当时是什么样的情况？你为什么这么做？如果重来的话，你会不会做的不一样呢？"><a href="#17-Is-there-a-time-that-you-made-an-important-business-technical-decision-without-consulting-your-manager-你有没有自己做决定的，没有问manager的情况-当时是什么样的情况？你为什么这么做？如果重来的话，你会不会做的不一样呢？" class="headerlink" title="17. Is there a time that you made an important business/technical decision without consulting your manager? 你有没有自己做决定的，没有问manager的情况? 当时是什么样的情况？你为什么这么做？如果重来的话，你会不会做的不一样呢？"></a>17. Is there a time that you made an important business/technical decision without consulting your manager? 你有没有自己做决定的，没有问manager的情况? 当时是什么样的情况？你为什么这么做？如果重来的话，你会不会做的不一样呢？</h4><p>&emsp;&emsp;要提及为什么没有咨询manager，然后要保证自己在做决定是经过深思熟虑的，进行了很多方案的模拟和头脑风暴，权衡利弊，最后作出决策，取得了好的结果。</p><h4 id="18-How-do-you-keep-up-to-date-on-new-technologies-and-trends-in-this-industry-Uber和Facebook问过"><a href="#18-How-do-you-keep-up-to-date-on-new-technologies-and-trends-in-this-industry-Uber和Facebook问过" class="headerlink" title="18. How do you keep up-to-date on new technologies and trends in this industry? (Uber和Facebook问过)"></a>18. How do you keep up-to-date on new technologies and trends in this industry? (Uber和Facebook问过)</h4><p>&emsp;&emsp;1. 读一些Tech Blog;<br>&emsp;&emsp;2. 平时工作中用到的知识和工具，读相关的Document弄清楚机制原理;<br>&emsp;&emsp;3. 参加Tech Conference和Tech Talk;<br>&emsp;&emsp;4. 多浏览职位的招聘信息，稍加总结就能有大概了解流行技术。</p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ol><li>Amazon Leadership Principle(亚麻军规) —— <a href="https://www.amazon.jobs/en/principles" target="_blank" rel="noopener">传送门</a> —— 面试Amazon必知<ul><li>Customer Obsession</li><li>Ownership</li><li>Invent and Simplify</li><li>Are Right, A Lot</li><li>Learn and Be Curious</li><li>Hire and Develop the Best</li><li>Insist on the Highest Standards</li><li>Think Big</li><li>Bias for Action</li><li>Frugality</li><li>Earn Trust</li><li>Dive Deep</li><li>Have Backbone; Disagree and Commit</li><li>Deliver Results</li></ul></li></ol><h3 id="推荐一篇文章"><a href="#推荐一篇文章" class="headerlink" title="推荐一篇文章"></a>推荐一篇文章</h3><ol><li><a href="https://laioffer.com/zh/stories/2017-12-08-nine-offers/" target="_blank" rel="noopener">我是如何拿到谷歌/FB/苹果/亚马逊/Uber/LinkedIn等9个大Offer的?</a> 来自来offer的成功案例ßß</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/Interview-Questions/bq3/bq.jpg&quot; width=&quot;100%&quot; height=&quot;100%&quot; alt=&quot;git&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Interview Questions" scheme="http://yoursite.com/categories/Interview-Questions/"/>
    
    
      <category term="BQ问题" scheme="http://yoursite.com/tags/BQ%E9%97%AE%E9%A2%98/"/>
    
      <category term="面试技巧" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>面试准备——BQ问题(二)</title>
    <link href="http://yoursite.com/Interview-Questions/bq2/"/>
    <id>http://yoursite.com/Interview-Questions/bq2/</id>
    <published>2019-06-26T11:13:05.000Z</published>
    <updated>2020-07-24T01:26:26.320Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/Interview-Questions/bq2/bq.jpg" width="100%" height="100%" alt="git"><br><a id="more"></a><br>&emsp;&emsp;<a href="https://cs-lurh.me/面经/bq1/" target="_blank" rel="noopener">BQ问题(一)</a>罗列了6个常见(尤其是Amazon面试中)的BQ问题，话不多说，本文继续。<br>&emsp;&emsp;PS: 仅供学习参考，请勿传播商用。</p><h3 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h3><h4 id="7-Describe-a-stressful-situation-at-work-and-how-you-handled-it-高压下如何工作"><a href="#7-Describe-a-stressful-situation-at-work-and-how-you-handled-it-高压下如何工作" class="headerlink" title="7. Describe a stressful situation at work and how you handled it? (高压下如何工作?)"></a>7. Describe a stressful situation at work and how you handled it? (高压下如何工作?)</h4><p>&emsp;&emsp;关键点在于多学习多讨论，及时沟通。<br>&emsp;&emsp;情境举例:<br>&emsp;&emsp;1. 一个project要用新的技术，需要大量的学习，需要赶上deadline。做的过程中，出现了较多的奇怪的出乎意料的问题，比如结构、网络配置、系统传输，导致整个系统不稳定。<br>&emsp;&emsp;Handle: 一个问题一个问题有层次的解决，同时及时与老板/上司沟通协调进度，确保不会造成严重后果。<br>&emsp;&emsp;2. 项目中加入了新的feature，时间比较紧张，同组的伙伴也没有很熟悉这类技术。<br>&emsp;&emsp;Handle: 多利用休息时间查询资料或者网上教程，遇到问题与同组人员多沟通，力求deadline前完成任务。</p><h4 id="8-Have-you-been-in-a-situation-where-you-did-not-have-enough-work-to-do-工作“清闲”的时候怎么办？"><a href="#8-Have-you-been-in-a-situation-where-you-did-not-have-enough-work-to-do-工作“清闲”的时候怎么办？" class="headerlink" title="8. Have you been in a situation where you did not have enough work to do? (工作“清闲”的时候怎么办？)"></a>8. Have you been in a situation where you did not have enough work to do? (工作“清闲”的时候怎么办？)</h4><p>&emsp;&emsp;1. 为什么清闲? 提前完成了project或者自己的任务(结合实例，一定要说)。<br>&emsp;&emsp;2. 之后做了什么? 可以 —— 1. 学习新的知识和技术 2. 优化自己的项目 3. 询问小组其他成员是否需要帮助<br>&emsp;&emsp;高级回答(2): 可以 —— keep manager informed and express your career development direction ——&gt; manager might 1. give you more tasks; 2. guide you to study new area.<br>&emsp;&emsp;问题2可以涉及“军规”deep dive, invent, explore, learn more…</p><h4 id="9-Have-you-been-in-a-situation-where-you-did-not-know-how-to-solve-a-challenging-problem-How-did-you-handle-it-经典"><a href="#9-Have-you-been-in-a-situation-where-you-did-not-know-how-to-solve-a-challenging-problem-How-did-you-handle-it-经典" class="headerlink" title="9. Have you been in a situation where you did not know how to solve a challenging problem? How did you handle it? (经典)"></a>9. Have you been in a situation where you did not know how to solve a challenging problem? How did you handle it? (经典)</h4><p>&emsp;&emsp;1. 首先尝试用自己的方法解决(查阅了什么资料、读了什么书)。如果还是没有解决，寻求同事帮助，经过沟通，完善了解决方案。<br>&emsp;&emsp;2. 不能解决某个问题的话，是不是因为哪个部分知识的缺失，然后主动去学习了。<br>&emsp;&emsp;设计的一些讨论点: Self study, brainstorming with coworkers, seeking guidance from senior members, etc.</p><h4 id="10-Do-you-use-YouTube-If-there-is-one-thing-that-you-could-improve-for-YouTube-what-would-it-be"><a href="#10-Do-you-use-YouTube-If-there-is-one-thing-that-you-could-improve-for-YouTube-what-would-it-be" class="headerlink" title="10. Do you use YouTube? If there is one thing that you could improve for YouTube, what would it be?"></a>10. Do you use YouTube? If there is one thing that you could improve for YouTube, what would it be?</h4><p>&emsp;&emsp;这个问题不完全是一道BQ题，可以考察对公司的了解程度，以及critical thinking的问题。(此问题就开始吐槽模式，但勿忘记给出自己的建议，最好与algorithm相关)<br>&emsp;&emsp;举例:推荐系统的问题。推荐的视频有时候会出现”误会”，喜爱看美食的同学却有的被推荐拳击视频；推荐的视频有的年份很老；如果不小心点了某一类视频，也会被推荐一系列类似视频…推荐系统的问题可以结合搜索算法来进行简单回答(如果有做过类似项目，贴合项目经验会更加分)。</p><h4 id="11-Have-you-ever-received-any-negative-feedbacks-from-your-peer-or-manager-What-was-it-and-what-did-you-do-about-it"><a href="#11-Have-you-ever-received-any-negative-feedbacks-from-your-peer-or-manager-What-was-it-and-what-did-you-do-about-it" class="headerlink" title="11. Have you ever received any negative feedbacks from your peer or manager? What was it and what did you do about it?"></a>11. Have you ever received any negative feedbacks from your peer or manager? What was it and what did you do about it?</h4><p>&emsp;&emsp;例子1:<br>&emsp;&emsp;Situation/Task: 我刚进某个公司实习的时候，被分配做一个XXX项目，需要什么时间完成，我一开始特别想证明自己，想把这个事情自己做好，结果非常struggle。然后收到了mentor的feedback，说我应该早些寻求帮助。<br>&emsp;&emsp;Action/Result: 我意识到了这个问题，之后我就会更加合理地评估自己面临的困难，是不是自己就能解决的，并且学会及时和manager去交流进度。最终这个项目成功deadline前上线，而且实现的也很好。<br>&emsp;&emsp;例子2: 过分注重细节。</p><h4 id="12-Is-there-a-time-when-you-worked-against-tight-deadlines-and-need-to-choose-between-quality-and-speed-How-did-you-handle-it"><a href="#12-Is-there-a-time-when-you-worked-against-tight-deadlines-and-need-to-choose-between-quality-and-speed-How-did-you-handle-it" class="headerlink" title="12. Is there a time when you worked against tight deadlines and need to choose between quality and speed? How did you handle it?"></a>12. Is there a time when you worked against tight deadlines and need to choose between quality and speed? How did you handle it?</h4><p>&emsp;&emsp;该问题与问题5类似。在这里多举一些例子:<br>&emsp;&emsp;1. 本次目标是推出1.0版本，然后在此基础上迭代更新，速度优先；如果目标是口碑，且使用的时候会有大量transaction，质量优先。<br>&emsp;&emsp;2. 也可以优先满足必须实现的基本功能(客户基本需求)，同时满足deadline，然后后期和客户交流进行跟进优化。<br>&emsp;&emsp;无论哪一种形式的例子，在出现选择类的问题时，都需要注重和manager的及时汇报和沟通。😊</p><h4 id="13-Tell-me-about-a-time-when-a-team-member-was-not-performing-well-and-impacted-your-work-How-did-you-handle-this-situation"><a href="#13-Tell-me-about-a-time-when-a-team-member-was-not-performing-well-and-impacted-your-work-How-did-you-handle-this-situation" class="headerlink" title="13. Tell me about a time when a team member was not performing well and impacted your work. How did you handle this situation?"></a>13. Tell me about a time when a team member was not performing well and impacted your work. How did you handle this situation?</h4><p>&emsp;&emsp;传说中的”猪”队友问题(可能是遇到不干活的队友之类的):<br>&emsp;&emsp;S/T: 我和XX一起做了XXX项目，发现他总是做不好，耽误了进度。<br>&emsp;&emsp;A: 于是，我先尝试和他沟通，了解到他的困难和问题，如果可以，协助他解决问题；如果实在无法沟通/无法解决，预估任务能否顺利完成，和manager及时沟通，并且获得了manager的理解和支持<br>&emsp;&emsp;R: 最终任务顺利完成，我也在这个过程中加强了和队友、领导协调和沟通的能力。</p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ol><li>Amazon Leadership Principle(亚麻军规) —— <a href="https://www.amazon.jobs/en/principles" target="_blank" rel="noopener">传送门</a> —— 面试Amazon必知<ul><li>Customer Obsession</li><li>Ownership</li><li>Invent and Simplify</li><li>Are Right, A Lot</li><li>Learn and Be Curious</li><li>Hire and Develop the Best</li><li>Insist on the Highest Standards</li><li>Think Big</li><li>Bias for Action</li><li>Frugality</li><li>Earn Trust</li><li>Dive Deep</li><li>Have Backbone; Disagree and Commit</li><li>Deliver Results</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/Interview-Questions/bq2/bq.jpg&quot; width=&quot;100%&quot; height=&quot;100%&quot; alt=&quot;git&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Interview Questions" scheme="http://yoursite.com/categories/Interview-Questions/"/>
    
    
      <category term="BQ问题" scheme="http://yoursite.com/tags/BQ%E9%97%AE%E9%A2%98/"/>
    
      <category term="面试技巧" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>面试准备——BQ问题(一)</title>
    <link href="http://yoursite.com/Interview-Questions/bq1/"/>
    <id>http://yoursite.com/Interview-Questions/bq1/</id>
    <published>2019-06-26T08:43:39.000Z</published>
    <updated>2020-07-24T01:26:27.290Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/Interview-Questions/bq1/bq.jpg" width="100%" height="100%" alt="git"><br><a id="more"></a><br>&emsp;&emsp;越来越多的公司倾向于考察面试者一些BQ(Behavior Question)，其中Amazon尤为明显，只注重算法的Google也开始考察这类问题(会有一轮针对于BQ和project)。因此，为了面试的通过率，搜罗一些常见的BQ问题用以准备。<br>&emsp;&emsp;由于注重的是BQ问题的准备，对于面试中会问到的project问题，在这里略作总结。针对简历上的项目，用了什么技术，有什么feature，有什么tradeoff，面对了什么challenge…诸如此类。<br>&emsp;&emsp;PS: 仅供学习参考，请勿传播商用。</p><h3 id="BQ基本原则-STAR原则"><a href="#BQ基本原则-STAR原则" class="headerlink" title="BQ基本原则(STAR原则)"></a>BQ基本原则(STAR原则)</h3><p>&emsp;&emsp;根据百度百科 —— <a href="https://baike.baidu.com/item/STAR%E5%8E%9F%E5%88%99" target="_blank" rel="noopener">传送门</a> —— 可以总结为以下四点:<br>&emsp;&emsp;S = Situation —— 这件事发生在什么时候，情况如何?<br>&emsp;&emsp;T = Task —— 在其背景环境中所执行的任务与角色是什么?<br>&emsp;&emsp;A = Action —— 针对这样的情况分析，采用了什么行动或操作?<br>&emsp;&emsp;R = Result —— 最后完成任务的情况如何，学到了什么?<br>&emsp;&emsp;如何将STAR原则熟练巧妙地运用在简历和面试中，这样的文章比比皆是，文末会附上我认为较有帮助的几篇文章。</p><h3 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h3><h4 id="1-Did-you-ever-not-meet-your-goals-Why"><a href="#1-Did-you-ever-not-meet-your-goals-Why" class="headerlink" title="1. Did you ever not meet your goals? Why?"></a>1. Did you ever not meet your goals? Why?</h4><p>&emsp;&emsp;一定要举例说明。<br>&emsp;&emsp;S&amp;T: 在XX时候，XXproject上，我设定了一个XX目标，然后没有按时完成。<br>&emsp;&emsp;A&amp;R: 我是XX处理的，最后结果是XX样子。后来我分析，之所以没完成是因为XX原因，然后我是如何针对性改进的。<br>&emsp;&emsp;1. 设定目标的角度:设定了一个目标和完成时间，结果低估了工作量。(应该是大家都会遇到的情况)<br>&emsp;&emsp;2. BUG:出现了预料之外的BUG，因此拖延了时间，解决了后有什么好处，最后学到了什么。</p><h4 id="2-如果你和组员-老板意见不一致如何处理？"><a href="#2-如果你和组员-老板意见不一致如何处理？" class="headerlink" title="2. 如果你和组员/老板意见不一致如何处理？"></a>2. 如果你和组员/老板意见不一致如何处理？</h4><p>&emsp;&emsp;1. Evaluate the situation: 首先判断是否自己对当下的情况理解有误，所以自己的意见是错误的。<br>&emsp;&emsp;2. 如果不是，自己提出的意见和理由是什么。<br>&emsp;&emsp;3. 如果别人仍然有异议，设想如果自己的意见未被采取，会不会有严重后果。<br>&emsp;&emsp;4. 如果可能产生严重后果，应该继续充分和组员/老板进行<font color="red">沟通</font>。<br>&emsp;&emsp;5. 最终达成一致，无论是不是和自己意见有偏差，都应接受结果。<br>&emsp;&emsp;PS: 结合具体实例进行说明。涉及的亚麻军规: ownership, have backbone, insist on the highest standards…</p><h4 id="3-Have-you-gone-above-and-beyond-the-call-of-duty-If-so-how-是否做过职责范围之外的事情"><a href="#3-Have-you-gone-above-and-beyond-the-call-of-duty-If-so-how-是否做过职责范围之外的事情" class="headerlink" title="3. Have you gone above and beyond the call of duty? If so, how? (是否做过职责范围之外的事情?)"></a>3. Have you gone above and beyond the call of duty? If so, how? (是否做过职责范围之外的事情?)</h4><p>&emsp;&emsp;1. 比如user有complain, 但是本来不是你负责，但是你觉得需要改进，于是take ownership，并且和上级沟通后，完成了这个事情，deliver results。(注意这里有一个矛盾点，就是不要涉及到同事已经做还未完成的部分，可以是比如新加入的feature)。<br>&emsp;&emsp;2. 场景举例: 某社团活动，原先应该来帮忙的人不来了，老板/社长决定让我把那些工作一起做了，但是没有足够的时间和精力，这种情况如何选择? (其余同学的工作本不在我的职责中，但是老板要求在期限之前全部完成，同时绝不会有足够的时间完成所有的工作) ——<br>&emsp;&emsp;可以问清楚老板，所有任务的priority和deadline分别是什么，如果确实没办法，可以提出有没有其他资源可以利用来完成(人力/物力)。——<br>&emsp;&emsp;Follow-up question: 这时候来了一个新人，但是没有任何工作背景，如何处理? ——<br>&emsp;&emsp;让新人接手我原来的工作，把手头的工作和资料预留给他，自身去做新的(额外)部分的工作，同时也可以学到更多东西。PS: 交给新人接手的工作更好的可以是我已经熟练的(耗时间但难度不大)。<br>&emsp;&emsp;可以参考的点: ownership, learn and be curious, think big, dive deep</p><h4 id="4-一个project，赶不上deadline，如何处理？"><a href="#4-一个project，赶不上deadline，如何处理？" class="headerlink" title="4. 一个project，赶不上deadline，如何处理？"></a>4. 一个project，赶不上deadline，如何处理？</h4><p>&emsp;&emsp;与问题1异曲同工，需要注意一个常见的错误答案: ❌我是个非常准时的人，不会做不完 ❌。<br>&emsp;&emsp;1. 预估进度，随时和上级保持沟通进度。工作上做好协调，确保不会造成严重后果。<br>&emsp;&emsp;2. 同时要根据这次赶不上的经验，下次更加准确的评估工作量，避免再次发生。(Re-evaluate deadline and ensure quality)</p><h4 id="5-马上赶不上deadline，注重完成速度还是质量？"><a href="#5-马上赶不上deadline，注重完成速度还是质量？" class="headerlink" title="5. 马上赶不上deadline，注重完成速度还是质量？"></a>5. 马上赶不上deadline，注重完成速度还是质量？</h4><p>&emsp;&emsp;根据不同项目的目的来做tradeoff。<br>&emsp;&emsp;1. 项目是否紧急，要在某一时间上线。如果是，是不是可以先抓住主要矛盾，把最重要的feature实现，其他的可以提出一个solution，之后进行优化处理。<br>&emsp;&emsp;2. 项目是一个内部工具，不一定非要按时deliver，根据要求去保证质量，例如一些功能的准确性和精度。</p><h4 id="6-为什么选择这个公司-Why-公司类"><a href="#6-为什么选择这个公司-Why-公司类" class="headerlink" title="6. 为什么选择这个公司? (Why 公司类)"></a>6. 为什么选择这个公司? (Why 公司类)</h4><p>&emsp;&emsp;这个一定要提前了解好所面试公司的基本信息。<br>&emsp;&emsp;可以说: 喜欢这个公司的产品、这个公司scale很大，有很大的影响力、欣赏公司文化，可以成长很快、和自身发展相符，可以双赢…</p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ol><li>BQ中提及的failure，要真实，但不要太严重，因为回答的重点在action上。</li><li>Amazon Leadership Principle(亚麻军规) —— <a href="https://www.amazon.jobs/en/principles" target="_blank" rel="noopener">传送门</a> —— 面试Amazon必知<ul><li>Customer Obsession</li><li>Ownership</li><li>Invent and Simplify</li><li>Are Right, A Lot</li><li>Learn and Be Curious</li><li>Hire and Develop the Best</li><li>Insist on the Highest Standards</li><li>Think Big</li><li>Bias for Action</li><li>Frugality</li><li>Earn Trust</li><li>Dive Deep</li><li>Have Backbone; Disagree and Commit</li><li>Deliver Results</li></ul></li><li>“姐夫”解释Amazon Leadership Principle的<a href="https://youtu.be/B-xdfQv3I1k" target="_blank" rel="noopener">视频</a></li></ol><h3 id="推荐几篇文章"><a href="#推荐几篇文章" class="headerlink" title="推荐几篇文章"></a>推荐几篇文章</h3><ol><li><a href="https://zhuanlan.zhihu.com/p/26449491" target="_blank" rel="noopener">为什么在简历和面试中使用STAR原则成功率更高</a> 来自CareerFrog职业蛙的知乎</li><li><a href="https://zhuanlan.zhihu.com/p/27840782" target="_blank" rel="noopener">应用STAR原则，7步介绍项目经验</a> 来自面试求职那些事的知乎</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/Interview-Questions/bq1/bq.jpg&quot; width=&quot;100%&quot; height=&quot;100%&quot; alt=&quot;git&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Interview Questions" scheme="http://yoursite.com/categories/Interview-Questions/"/>
    
    
      <category term="BQ问题" scheme="http://yoursite.com/tags/BQ%E9%97%AE%E9%A2%98/"/>
    
      <category term="面试技巧" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Markdown</title>
    <link href="http://yoursite.com/Programming-Laugauge/markdown/"/>
    <id>http://yoursite.com/Programming-Laugauge/markdown/</id>
    <published>2019-05-30T04:16:06.000Z</published>
    <updated>2020-04-19T07:43:34.645Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/Programming-Laugauge/markdown/markdown.png" width="100%" height="100%" alt="git"><br><a id="more"></a></p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p><em>Markdown</em> is a lightweight markup language with plain text formatting syntax. Its design allows it to be converted to many output formats, but the original tool by the same name only supports HTML.</p><p><em>Markdown</em> is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor.</p><p><strong><em>More Info</em></strong>: <a href="https://en.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">Wikipedia</a> or <a href="https://baike.baidu.com/item/markdown/3245829?fr=aladdin" target="_blank" rel="noopener">百度百科</a></p><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><ul><li>Plaint text</li><li>Converts to HTML</li><li>Easy to read and learn</li><li>Enables faster creating and editing of blog posts</li></ul><h2 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h2><h3 id="Headings"><a href="#Headings" class="headerlink" title="Headings"></a>Headings</h3><p>To create a heading, add number signs (#) in front of a word or phrase. The number of number signs you use should correspond to the heading level. For example, to create a heading level three, use three number signs (e.g., ### My Header).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Level 1</span><br><span class="line">## Level 2</span><br><span class="line">### Level 3</span><br><span class="line">#### Level 4</span><br><span class="line">##### Level 5</span><br><span class="line">###### Level 6</span><br></pre></td></tr></table></figure><h3 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h3><p>You can add emphasis by making text bold or italic.</p><h4 id="Bold"><a href="#Bold" class="headerlink" title="Bold"></a>Bold</h4><p>To bold text, add two asterisks before and after a word or phrase. To bold the middle of a word for emphasis, add two asterisks without spaces around the letters.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**bold text**</span><br></pre></td></tr></table></figure><p>The rendered output looks like this: <strong>bold text</strong></p><h4 id="Italic"><a href="#Italic" class="headerlink" title="Italic"></a>Italic</h4><p>To italicize text, add one asterisk before and after a word or phrase. To italicize the middle of a word for emphasis, add one asterisk without spaces around the letters.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*italic text*</span><br></pre></td></tr></table></figure><p>The rendered output looks like this: <em>bold text</em></p><h4 id="Bold-and-Italic"><a href="#Bold-and-Italic" class="headerlink" title="Bold and Italic"></a>Bold and Italic</h4><p>To emphasize text with bold and italics at the same time, add three asterisks before and after a word or phrase.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">***bold and italic text***</span><br></pre></td></tr></table></figure><p>The rendered output looks like this: <strong><em>bold and italic text</em></strong></p><h3 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h3><p>To create a blockquote, add a &gt; in front of a paragraph.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; This is a quotation.</span><br><span class="line">&gt;</span><br><span class="line">&gt;&gt; THis is nested quotation.</span><br></pre></td></tr></table></figure><p>The rendered output looks like this:</p><blockquote><p>This is a quotation.</p><blockquote><p>THis is nested quotation.</p></blockquote></blockquote><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><p>You can organize items into ordered and unordered lists.</p><h4 id="Unordered-Lists"><a href="#Unordered-Lists" class="headerlink" title="Unordered Lists"></a>Unordered Lists</h4><p>To create an unordered list, add dashes, asterisks, or plus signs in front of line items. Indent one or more items to create a nested list.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- list item1</span><br><span class="line">- list item2</span><br><span class="line">   * list</span><br><span class="line">   * list</span><br><span class="line">   * list</span><br><span class="line">- list item3</span><br></pre></td></tr></table></figure><p>The rendered output looks like this:</p><ul><li>list item1</li><li>list item2<ul><li>list</li><li>list</li><li>list</li></ul></li><li>list item3</li></ul><h4 id="Ordered-Lists"><a href="#Ordered-Lists" class="headerlink" title="Ordered Lists"></a>Ordered Lists</h4><p>To create an ordered list, add line items with numbers followed by periods. The numbers don’t have to be in numerical order, but the list should start with the number one.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. list item1</span><br><span class="line">2. list item2</span><br><span class="line">   1. list</span><br><span class="line">   2. list</span><br><span class="line">   3. list</span><br><span class="line">3. list item3</span><br></pre></td></tr></table></figure><p>The rendered output looks like this:</p><ol><li>list item1</li><li>list item2<ol><li>list</li><li>list</li><li>list</li></ol></li><li>list item3</li></ol><h3 id="Horizontal-Rules"><a href="#Horizontal-Rules" class="headerlink" title="Horizontal Rules"></a>Horizontal Rules</h3><p>To create a horizontal rule, use three or more asterisks, dashes, or underscores on a line by themselves.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">****</span><br><span class="line">---</span><br><span class="line">----</span><br><span class="line">___</span><br><span class="line">____</span><br></pre></td></tr></table></figure><h3 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h3><p>To create a link, enclose the link text in brackets and then follow it immediately with the URL in parentheses.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Google](https://www.google.com/)</span><br><span class="line">[Baidu](http://www.baidu.com/)</span><br></pre></td></tr></table></figure><p>The rendered output looks like this:<br><a href="https://www.google.com/" target="_blank" rel="noopener">Google</a><br><a href="http://www.baidu.com/" target="_blank" rel="noopener">Baidu</a></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>If the word or phrase you want to denote as code includes one or more tick marks, you can escape it by enclosing the word or phrase in double tick marks.</p><h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h3><p>To add an image, add an exclamation mark (!), followed by alt text in brackets, and the path or URL to the image asset in parentheses. You can optionally add a title after the URL in the parentheses.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![Pikachu Detective](https://www.pokemoncenter.com/wcsstore/MarketingContent/detective-pikachu/landing_detective-pikachu_header.jpg &quot;Pikachu Detective&quot;)</span><br></pre></td></tr></table></figure><p>The rendered output looks like this:<br><img src="https://www.pokemoncenter.com/wcsstore/MarketingContent/detective-pikachu/landing_detective-pikachu_header.jpg" alt="Pikachu Detective" title="Pikachu Detective"></p><h3 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h3><p>The second line separates the header and the content.<br>By default, text is left; Add two colons before and after dashes, text is center; Add one colon after dashes, text is right.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Name|Number|E-mail</span><br><span class="line">--|:--:|--:</span><br><span class="line">Lucas|1|xxxxx@xxxx</span><br><span class="line">Tracy|2|xxxxx@xxxx</span><br><span class="line">Mento|3|xxxxx@xxxx</span><br></pre></td></tr></table></figure><p>The rendered output looks like this:</p><table><thead><tr><th>Name</th><th style="text-align:center">Number</th><th style="text-align:right">E-mail</th></tr></thead><tbody><tr><td>Lucas</td><td style="text-align:center">1</td><td style="text-align:right">xxxxx@xxxx</td></tr><tr><td>Tracy</td><td style="text-align:center">2</td><td style="text-align:right">xxxxx@xxxx</td></tr><tr><td>Mento</td><td style="text-align:center">3</td><td style="text-align:right">xxxxx@xxxx</td></tr></tbody></table><h2 id="Recommended-Articles"><a href="#Recommended-Articles" class="headerlink" title="Recommended Articles"></a>Recommended Articles</h2><ol><li><a href="https://www.markdownguide.org/basic-syntax" target="_blank" rel="noopener">Basic Syntax from Markdown Guide</a></li><li><a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">Markdown基本语法</a> 来自高鸿祥的简书</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/Programming-Laugauge/markdown/markdown.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; alt=&quot;git&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Programming Laugauge" scheme="http://yoursite.com/categories/Programming-Laugauge/"/>
    
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
</feed>
