<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[简单介绍 - Docker和ElasticSearch]]></title>
    <url>%2FDeveloper-Tools%2Fdocker-and-elastic%2F</url>
    <content type="text"><![CDATA[Docker简介容器引擎，能够打包/发布应用程序，包括系统环境、配置、依赖；虚拟化，沙箱机制(“轻量级虚拟机”)；Go语言编写。 安装下载安装包并安装 Run it (Terminal Command)1docker version 👆我们可以看到Client和Server的信息1docker run hello-world 👆hello from docker，我们可以看到docker运行流程1docker run -it alpine sh 👆docker run是运行，-it是输入输出重定向，alpine是最小Linux镜像，sh是shell命令(ubuntu -&gt; bash)1docker images 👆查看已经获取的本地镜像1docker ps 👆列出当前正在运行的容器1docker image rm &lt;image id&gt; [&lt;image id&gt; ...] 👆移除获取的本地镜像(需要先移除对应的容器)1docker rm &lt;container id&gt; [&lt;container id&gt; ...] 👆移除获取的容器1docker run -d -p 8080:80 nginx 👆-d代表程序直接返回(后端持续运行，作为指挥进程)，由于nginx是一个网络服务器，-p 8080:80是将nginx的端口(80)映射到我们的本地端口(8080)1docker stop &lt;container id&gt; 👆终止已经启动的容器(id) Modify and Commit1docker cp &lt;file&gt; &lt;container id&gt;://path 👆向容器中拷贝文件file(暂时性：如果不commit，这种修改只存在于容器运行阶段) ElasticSearch简介全文搜索引擎，能够快速储存、搜索和分析海量数据，通常可以满足大量站内搜索的需求，例如维基百科、Github、Stack Overflow。不需要建表、配置字段等；数据可以JSON格式存储；原生支持搜索，不需要拼装查询语句。 安装方法一: 从网站下载安装包、配置、运行方法二: 直接使用Docker拉取对应版本的elasticsearch12docker pull docker.elastic.co/elasticsearch/elasticsearch:7.6.2docker run -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; docker.elastic.co/elasticsearch/elasticsearch:7.6.2 👆启动单点模式的elasticearch(可用于简单搜索)，端口9200 URL&lt;server&gt;:9200/index/type/idindex -&gt; databasetype -&gt; tableid -&gt; JSON obj其中，index和type无需预先创建；type中的数据类型可以不一致。在elasticsearch7中，为了解决不同type的字段重名问题，type概念被移除了。 GET, PUT, POST, DELETE (REST)GET -&gt; &lt;server&gt;:9200/index/type/_search 表示搜索在当前index的type下的全部对象GET -&gt; &lt;server&gt;:9200/index/type/_search?q=xxxxx 表示搜索在当前index的type下含有完整xxxxx的对象GET -&gt; &lt;server&gt;:9200/index/type/_mapping 配置类型PUT/POST -&gt; &lt;server&gt;:9200/index/type/id 创建/修改数据(不加id只能用POST来进行上传，id会随机分配) Coding (Go语言)Package Managers (import “github.com/olivere/elastic/v7”)👇(适合新手学习，非官方，抽象更简单)1go get github.com/olivere/elastic/v7 常用方法示例1234// Creates a new elasticsearch clientclient, err := elastic.NewClient( // Must turn off sniff in docker elastic.SetSniff(false)) 1234567// Stores the data (create/modify)resp, err := client.Index(). Index(&quot;example&quot;). Type(&quot;exp&quot;). Id(&quot;1&quot;). BodyJson(item). Do(context.Background()) 123456// Gets the dataresp, err := client.Get(). Index(&quot;example&quot;). Type(&quot;exp&quot;). Id(&quot;1&quot;). Do(context.Background()) 版权所有&emsp;&emsp;仅供交流学习，禁止转载商用！]]></content>
      <categories>
        <category>Developer Tools</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线段树/区间树(Segment Tree)]]></title>
    <url>%2FData-Structure%2FSegmentTree%2F</url>
    <content type="text"><![CDATA[线段树的定义&emsp;&emsp;实质是二叉树(平衡但不完全)，但每一个节点都是一个区间(根据业务逻辑的定义)。例如求和，根结点就是所有的元素和，叶子结点就是一个元素的值。&emsp;&emsp;如果区间内有n个元素，使用数组表示线段树，在一般不考虑添加元素的前提下，使用4n的静态空间即可。 线段树的应用&emsp;&emsp;对于某一类问题，我们关心的是一段区间(线段) 经典问题之一：区间染色&emsp;&emsp;有一面长度为n的墙，每次选择一段墙进行染色。&emsp;&emsp;1. m次操作后，我们可以看见多少种颜色?&emsp;&emsp;2. m次操作后，我们在[i, j]区间内看见多少种颜色?&emsp;&emsp;染色操作 = 更新区间，查询操作 = 查询区间 经典问题之二：区间统计查询&emsp;&emsp;查询一个区间[i, j]的最大值，最小值，或者区间数字和 代码实现(Java)线段树实现:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119public class SegmentTree&lt;E&gt; &#123; private E[] tree; private E[] data; private Merger&lt;E&gt; merger; public SegmentTree(E[] arr, Merger&lt;E&gt; merger) &#123; this.merger = merger; data = (E[])new Object[arr.length]; for(int i = 0 ; i &lt; arr.length ; i ++) data[i] = arr[i]; tree = (E[])new Object[4 * arr.length]; buildSegmentTree(0, 0, data.length - 1); &#125; public int getSize() &#123; return data.length; &#125; // 返回index位置上的元素 public E get(int index) &#123; // 索引验证: if(index &lt; 0 || index &gt;= data.length) throw new IllegalArgumentException(&quot;Illegal Index&quot;); return data[index]; &#125; // 返回区间[queryL, queryR]的值 public E query(int queryL, int queryR) &#123; // 合法性验证: if (queryL &lt; 0 || queryL &gt;= data.length || queryR &lt; 0 || queryR &gt;= data.length || queryL &gt; queryR) throw new IllegalArgumentException(&quot;Illegal Index&quot;); return query(0, 0, data.length - 1, queryL, queryR); &#125; // 将index位置的值，更新为e public void set(int index, E e) &#123; // 合法性验证: if(index &lt; 0 || index &gt;= data.length) throw new IllegalArgumentException(&quot;Illegal Index&quot;); data[index] = e; set(0, 0, data.length - 1, index, e); &#125; // 在treeIndex的位置创建表示区间[l...r]的线段树 private void buildSegmentTree(int treeIndex, int l, int r)&#123; if (l == r) &#123; tree[treeIndex] = data[l]; return; &#125; int leftTreeIndex = leftChild(treeIndex); int rightTreeIndex = rightChild(treeIndex); // 实际上mid = (l + r) / 2, 防止整型溢出 int mid = l + (r - l) / 2; buildSegmentTree(leftTreeIndex, l, mid); buildSegmentTree(rightTreeIndex, mid + 1, r); tree[treeIndex] = merger.merge(tree[leftTreeIndex], tree[rightTreeIndex]); &#125; // 在以treeIndex为根的线段树中[l...r]的范围里，搜索区间[queryL...queryR]的值 private E query(int treeIndex, int l, int r, int queryL, int queryR) &#123; if (l == queryL &amp;&amp; r == queryR) return tree[treeIndex]; int mid = l + (r - l) / 2; int leftTreeIndex = leftChild(treeIndex); int rightTreeIndex = rightChild(treeIndex); if (queryL &gt;= mid + 1) return query(rightTreeIndex, mid + 1, r, queryL, queryR); else if (queryR &lt;= mid) return query(leftTreeIndex, l, mid, queryL, queryR); E leftResult = query(leftTreeIndex, l, mid, queryL, mid); E rightResult = query(rightTreeIndex, mid + 1, r, mid + 1, queryR); return merger.merge(leftResult, rightResult); &#125; // 在以treeIndex为根的线段树中更新index的值为e private void set(int treeIndex, int l, int r, int index, E e) &#123; if(l == r)&#123; tree[treeIndex] = e; return; &#125; int mid = l + (r - l) / 2; int leftTreeIndex = leftChild(treeIndex); int rightTreeIndex = rightChild(treeIndex); if (index &gt;= mid + 1) set(rightTreeIndex, mid + 1, r, index, e); else set(leftTreeIndex, l, mid, index, e); tree[treeIndex] = merger.merge(tree[leftTreeIndex], tree[rightTreeIndex]); &#125; // 返回完全二叉树的数组表示中，一个索引所表示的元素的左孩子节点的索引 private int leftChild(int index)&#123; return 2 * index + 1; &#125; // 返回完全二叉树的数组表示中，一个索引所表示的元素的右孩子节点的索引 private int rightChild(int index)&#123; return 2 * index + 2; &#125;&#125; 融合器(接口):123public interface Merger&lt;E&gt; &#123; E merge(E a, E b);&#125; Main函数举例:1234567891011121314public class Main &#123; public static void main(String[] args) &#123; Integer[] nums = &#123;-2, 0, 3, -5, 2, -1&#125;; SegmentTree&lt;Integer&gt; segTree = new SegmentTree&lt;&gt;(nums, new Merger&lt;Integer&gt;() &#123; @Override public Integer merge(Integer a, Integer b) &#123; return a + b; &#125; &#125;); &#125;&#125; 版权所有&emsp;&emsp;本文所述的知识总结出自慕课网课程 ——《算法大神带你玩转数据结构 从入门到精通》, 授课老师: liuyubobobo&emsp;&emsp;仅供交流学习，禁止转载商用！]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Segment Tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面试准备——BQ问题(三)]]></title>
    <url>%2F%E9%9D%A2%E7%BB%8F%2Fbq3%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;BQ问题(一)对应问题1-6。&emsp;&emsp;BQ问题(二)对应问题7-13。&emsp;&emsp;PS: 仅供学习参考，请勿传播商用。 问题汇总14. Is there a time when you saw an issue that would impact your team and you took an action to solve it? 你有没有发现过小组里某个隐藏的问题，并且积极采取行动去解决它？这个问题是什么？你做了什么？最后结果是什么？&emsp;&emsp;观点参考:问题可能一直都有的，在没有很好的解决方案之前可能保持现状更好。能提出更优化的方案，可以思考下老方案的形成背景是啥，为什么当时这么设计，为什么当时的设计不支持现在的业务了。有时候提出解决方案很容易，但是自己的解决方案是否完备，是否能够支持未来更多特性，是否给未来埋坑，这些点在实际工业场景才更重要。个人认为，仅仅解决问题其实只是修正bug而已，如果能说下前前后后自己的思考，并形成一套解决问题的思考逻辑框架，这些点才重要。填坑容易，填坑的同时怎么保证不引入新坑。这就需要详细了解前人设计的背景和出发点了。没有理解前人设计就去改动，很容易带来新坑。&emsp;&emsp;举例:检查小组代码的时候发现了一个和业务逻辑有冲突的点，自己想好了解决方案之后跟老板、同事讨论，最后自己的方案被采纳后完成了修改。最后说一下学习和总结到了什么，下次team怎么能做的更好。 15. We don’t always make the right judgment all the time. Tell me about a time when you made an error in judgment. 你有没有做出错误判断的情况，你是怎么处理的呢?&emsp;&emsp;该问题很容易，但是需要注意:::不要选择严重的错误，选个影响较低的错误。将回答重心放在如何解决，在这个过程中学到了什么，按照STAR法则来答。 16. 你有没有和其他组一起合作做项目，deadline已经很近了，但由于对方的问题，进展不顺利的情况？你是如何解决的？你学到了什么？&emsp;&emsp;首先要保证自己的部分高质量完成，然后看看对方负责的任务自己有没有能力帮忙，有的话就帮忙做一下；没有的话需要跟manager沟通协调解决方案。需谨记:::与manage及时沟通很重要&emsp;&emsp;用亚麻的方式说的话，就是积极take ownership，并且deliver result。 17. Is there a time that you made an important business/technical decision without consulting your manager? 你有没有自己做决定的，没有问manager的情况? 当时是什么样的情况？你为什么这么做？如果重来的话，你会不会做的不一样呢？&emsp;&emsp;要提及为什么没有咨询manager，然后要保证自己在做决定是经过深思熟虑的，进行了很多方案的模拟和头脑风暴，权衡利弊，最后作出决策，取得了好的结果。 18. How do you keep up-to-date on new technologies and trends in this industry? (Uber和Facebook问过)&emsp;&emsp;1. 读一些Tech Blog;&emsp;&emsp;2. 平时工作中用到的知识和工具，读相关的Document弄清楚机制原理;&emsp;&emsp;3. 参加Tech Conference和Tech Talk;&emsp;&emsp;4. 多浏览职位的招聘信息，稍加总结就能有大概了解流行技术。 Tips Amazon Leadership Principle(亚麻军规) —— 传送门 —— 面试Amazon必知 Customer Obsession Ownership Invent and Simplify Are Right, A Lot Learn and Be Curious Hire and Develop the Best Insist on the Highest Standards Think Big Bias for Action Frugality Earn Trust Dive Deep Have Backbone; Disagree and Commit Deliver Results 推荐一篇文章 我是如何拿到谷歌/FB/苹果/亚马逊/Uber/LinkedIn等9个大Offer的? 来自来offer的成功案例ßß]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>BQ问题</tag>
        <tag>面试技巧</tag>
        <tag>简历</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面试准备——BQ问题(二)]]></title>
    <url>%2F%E9%9D%A2%E7%BB%8F%2Fbq2%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;BQ问题(一)罗列了6个常见(尤其是Amazon面试中)的BQ问题，话不多说，本文继续。&emsp;&emsp;PS: 仅供学习参考，请勿传播商用。 问题汇总7. Describe a stressful situation at work and how you handled it? (高压下如何工作?)&emsp;&emsp;关键点在于多学习多讨论，及时沟通。&emsp;&emsp;情境举例:&emsp;&emsp;1. 一个project要用新的技术，需要大量的学习，需要赶上deadline。做的过程中，出现了较多的奇怪的出乎意料的问题，比如结构、网络配置、系统传输，导致整个系统不稳定。&emsp;&emsp;Handle: 一个问题一个问题有层次的解决，同时及时与老板/上司沟通协调进度，确保不会造成严重后果。&emsp;&emsp;2. 项目中加入了新的feature，时间比较紧张，同组的伙伴也没有很熟悉这类技术。&emsp;&emsp;Handle: 多利用休息时间查询资料或者网上教程，遇到问题与同组人员多沟通，力求deadline前完成任务。 8. Have you been in a situation where you did not have enough work to do? (工作“清闲”的时候怎么办？)&emsp;&emsp;1. 为什么清闲? 提前完成了project或者自己的任务(结合实例，一定要说)。&emsp;&emsp;2. 之后做了什么? 可以 —— 1. 学习新的知识和技术 2. 优化自己的项目 3. 询问小组其他成员是否需要帮助&emsp;&emsp;高级回答(2): 可以 —— keep manager informed and express your career development direction ——&gt; manager might 1. give you more tasks; 2. guide you to study new area.&emsp;&emsp;问题2可以涉及“军规”deep dive, invent, explore, learn more… 9. Have you been in a situation where you did not know how to solve a challenging problem? How did you handle it? (经典)&emsp;&emsp;1. 首先尝试用自己的方法解决(查阅了什么资料、读了什么书)。如果还是没有解决，寻求同事帮助，经过沟通，完善了解决方案。&emsp;&emsp;2. 不能解决某个问题的话，是不是因为哪个部分知识的缺失，然后主动去学习了。&emsp;&emsp;设计的一些讨论点: Self study, brainstorming with coworkers, seeking guidance from senior members, etc. 10. Do you use YouTube? If there is one thing that you could improve for YouTube, what would it be?&emsp;&emsp;这个问题不完全是一道BQ题，可以考察对公司的了解程度，以及critical thinking的问题。(此问题就开始吐槽模式，但勿忘记给出自己的建议，最好与algorithm相关)&emsp;&emsp;举例:推荐系统的问题。推荐的视频有时候会出现”误会”，喜爱看美食的同学却有的被推荐拳击视频；推荐的视频有的年份很老；如果不小心点了某一类视频，也会被推荐一系列类似视频…推荐系统的问题可以结合搜索算法来进行简单回答(如果有做过类似项目，贴合项目经验会更加分)。 11. Have you ever received any negative feedbacks from your peer or manager? What was it and what did you do about it?&emsp;&emsp;例子1:&emsp;&emsp;Situation/Task: 我刚进某个公司实习的时候，被分配做一个XXX项目，需要什么时间完成，我一开始特别想证明自己，想把这个事情自己做好，结果非常struggle。然后收到了mentor的feedback，说我应该早些寻求帮助。&emsp;&emsp;Action/Result: 我意识到了这个问题，之后我就会更加合理地评估自己面临的困难，是不是自己就能解决的，并且学会及时和manager去交流进度。最终这个项目成功deadline前上线，而且实现的也很好。&emsp;&emsp;例子2: 过分注重细节。 12. Is there a time when you worked against tight deadlines and need to choose between quality and speed? How did you handle it?&emsp;&emsp;该问题与问题5类似。在这里多举一些例子:&emsp;&emsp;1. 本次目标是推出1.0版本，然后在此基础上迭代更新，速度优先；如果目标是口碑，且使用的时候会有大量transaction，质量优先。&emsp;&emsp;2. 也可以优先满足必须实现的基本功能(客户基本需求)，同时满足deadline，然后后期和客户交流进行跟进优化。&emsp;&emsp;无论哪一种形式的例子，在出现选择类的问题时，都需要注重和manager的及时汇报和沟通。😊 13. Tell me about a time when a team member was not performing well and impacted your work. How did you handle this situation?&emsp;&emsp;传说中的”猪”队友问题(可能是遇到不干活的队友之类的):&emsp;&emsp;S/T: 我和XX一起做了XXX项目，发现他总是做不好，耽误了进度。&emsp;&emsp;A: 于是，我先尝试和他沟通，了解到他的困难和问题，如果可以，协助他解决问题；如果实在无法沟通/无法解决，预估任务能否顺利完成，和manager及时沟通，并且获得了manager的理解和支持&emsp;&emsp;R: 最终任务顺利完成，我也在这个过程中加强了和队友、领导协调和沟通的能力。 Tips Amazon Leadership Principle(亚麻军规) —— 传送门 —— 面试Amazon必知 Customer Obsession Ownership Invent and Simplify Are Right, A Lot Learn and Be Curious Hire and Develop the Best Insist on the Highest Standards Think Big Bias for Action Frugality Earn Trust Dive Deep Have Backbone; Disagree and Commit Deliver Results]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>BQ问题</tag>
        <tag>面试技巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面试准备——BQ问题(一)]]></title>
    <url>%2F%E9%9D%A2%E7%BB%8F%2Fbq1%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;越来越多的公司倾向于考察面试者一些BQ(Behavior Question)，其中Amazon尤为明显，只注重算法的Google也开始考察这类问题(会有一轮针对于BQ和project)。因此，为了面试的通过率，搜罗一些常见的BQ问题用以准备。&emsp;&emsp;由于注重的是BQ问题的准备，对于面试中会问到的project问题，在这里略作总结。针对简历上的项目，用了什么技术，有什么feature，有什么tradeoff，面对了什么challenge…诸如此类。&emsp;&emsp;PS: 仅供学习参考，请勿传播商用。 BQ基本原则(STAR原则)&emsp;&emsp;根据百度百科 —— 传送门 —— 可以总结为以下四点:&emsp;&emsp;S = Situation —— 这件事发生在什么时候，情况如何?&emsp;&emsp;T = Task —— 在其背景环境中所执行的任务与角色是什么?&emsp;&emsp;A = Action —— 针对这样的情况分析，采用了什么行动或操作?&emsp;&emsp;R = Result —— 最后完成任务的情况如何，学到了什么?&emsp;&emsp;如何将STAR原则熟练巧妙地运用在简历和面试中，这样的文章比比皆是，文末会附上我认为较有帮助的几篇文章。 问题汇总1. Did you ever not meet your goals? Why?&emsp;&emsp;一定要举例说明。&emsp;&emsp;S&amp;T: 在XX时候，XXproject上，我设定了一个XX目标，然后没有按时完成。&emsp;&emsp;A&amp;R: 我是XX处理的，最后结果是XX样子。后来我分析，之所以没完成是因为XX原因，然后我是如何针对性改进的。&emsp;&emsp;1. 设定目标的角度:设定了一个目标和完成时间，结果低估了工作量。(应该是大家都会遇到的情况)&emsp;&emsp;2. BUG:出现了预料之外的BUG，因此拖延了时间，解决了后有什么好处，最后学到了什么。 2. 如果你和组员/老板意见不一致如何处理？&emsp;&emsp;1. Evaluate the situation: 首先判断是否自己对当下的情况理解有误，所以自己的意见是错误的。&emsp;&emsp;2. 如果不是，自己提出的意见和理由是什么。&emsp;&emsp;3. 如果别人仍然有异议，设想如果自己的意见未被采取，会不会有严重后果。&emsp;&emsp;4. 如果可能产生严重后果，应该继续充分和组员/老板进行沟通。&emsp;&emsp;5. 最终达成一致，无论是不是和自己意见有偏差，都应接受结果。&emsp;&emsp;PS: 结合具体实例进行说明。涉及的亚麻军规: ownership, have backbone, insist on the highest standards… 3. Have you gone above and beyond the call of duty? If so, how? (是否做过职责范围之外的事情?)&emsp;&emsp;1. 比如user有complain, 但是本来不是你负责，但是你觉得需要改进，于是take ownership，并且和上级沟通后，完成了这个事情，deliver results。(注意这里有一个矛盾点，就是不要涉及到同事已经做还未完成的部分，可以是比如新加入的feature)。&emsp;&emsp;2. 场景举例: 某社团活动，原先应该来帮忙的人不来了，老板/社长决定让我把那些工作一起做了，但是没有足够的时间和精力，这种情况如何选择? (其余同学的工作本不在我的职责中，但是老板要求在期限之前全部完成，同时绝不会有足够的时间完成所有的工作) ——&emsp;&emsp;可以问清楚老板，所有任务的priority和deadline分别是什么，如果确实没办法，可以提出有没有其他资源可以利用来完成(人力/物力)。——&emsp;&emsp;Follow-up question: 这时候来了一个新人，但是没有任何工作背景，如何处理? ——&emsp;&emsp;让新人接手我原来的工作，把手头的工作和资料预留给他，自身去做新的(额外)部分的工作，同时也可以学到更多东西。PS: 交给新人接手的工作更好的可以是我已经熟练的(耗时间但难度不大)。&emsp;&emsp;可以参考的点: ownership, learn and be curious, think big, dive deep 4. 一个project，赶不上deadline，如何处理？&emsp;&emsp;与问题1异曲同工，需要注意一个常见的错误答案: ❌我是个非常准时的人，不会做不完 ❌。&emsp;&emsp;1. 预估进度，随时和上级保持沟通进度。工作上做好协调，确保不会造成严重后果。&emsp;&emsp;2. 同时要根据这次赶不上的经验，下次更加准确的评估工作量，避免再次发生。(Re-evaluate deadline and ensure quality) 5. 马上赶不上deadline，注重完成速度还是质量？&emsp;&emsp;根据不同项目的目的来做tradeoff。&emsp;&emsp;1. 项目是否紧急，要在某一时间上线。如果是，是不是可以先抓住主要矛盾，把最重要的feature实现，其他的可以提出一个solution，之后进行优化处理。&emsp;&emsp;2. 项目是一个内部工具，不一定非要按时deliver，根据要求去保证质量，例如一些功能的准确性和精度。 6. 为什么选择这个公司? (Why 公司类)&emsp;&emsp;这个一定要提前了解好所面试公司的基本信息。&emsp;&emsp;可以说: 喜欢这个公司的产品、这个公司scale很大，有很大的影响力、欣赏公司文化，可以成长很快、和自身发展相符，可以双赢… Tips BQ中提及的failure，要真实，但不要太严重，因为回答的重点在action上。 Amazon Leadership Principle(亚麻军规) —— 传送门 —— 面试Amazon必知 Customer Obsession Ownership Invent and Simplify Are Right, A Lot Learn and Be Curious Hire and Develop the Best Insist on the Highest Standards Think Big Bias for Action Frugality Earn Trust Dive Deep Have Backbone; Disagree and Commit Deliver Results “姐夫”解释Amazon Leadership Principle的视频 推荐几篇文章 为什么在简历和面试中使用STAR原则成功率更高 来自CareerFrog职业蛙的知乎 应用STAR原则，7步介绍项目经验 来自面试求职那些事的知乎]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>BQ问题</tag>
        <tag>面试技巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown]]></title>
    <url>%2FProgramming-Laugauge%2Fmarkdown%2F</url>
    <content type="text"><![CDATA[IntroductionDefinitionMarkdown is a lightweight markup language with plain text formatting syntax. Its design allows it to be converted to many output formats, but the original tool by the same name only supports HTML. Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor. More Info: Wikipedia or 百度百科 Properties Plaint text Converts to HTML Easy to read and learn Enables faster creating and editing of blog posts SyntaxHeadingsTo create a heading, add number signs (#) in front of a word or phrase. The number of number signs you use should correspond to the heading level. For example, to create a heading level three, use three number signs (e.g., ### My Header). 123456# Level 1## Level 2### Level 3#### Level 4##### Level 5###### Level 6 EmphasisYou can add emphasis by making text bold or italic. BoldTo bold text, add two asterisks before and after a word or phrase. To bold the middle of a word for emphasis, add two asterisks without spaces around the letters. 1**bold text** The rendered output looks like this: bold text ItalicTo italicize text, add one asterisk before and after a word or phrase. To italicize the middle of a word for emphasis, add one asterisk without spaces around the letters. 1*italic text* The rendered output looks like this: bold text Bold and ItalicTo emphasize text with bold and italics at the same time, add three asterisks before and after a word or phrase. 1***bold and italic text*** The rendered output looks like this: bold and italic text BlockquotesTo create a blockquote, add a &gt; in front of a paragraph. 123&gt; This is a quotation.&gt;&gt;&gt; THis is nested quotation. The rendered output looks like this: This is a quotation. THis is nested quotation. ListsYou can organize items into ordered and unordered lists. Unordered ListsTo create an unordered list, add dashes, asterisks, or plus signs in front of line items. Indent one or more items to create a nested list. 123456- list item1- list item2 * list * list * list- list item3 The rendered output looks like this: list item1 list item2 list list list list item3 Ordered ListsTo create an ordered list, add line items with numbers followed by periods. The numbers don’t have to be in numerical order, but the list should start with the number one. 1234561. list item12. list item2 1. list 2. list 3. list3. list item3 The rendered output looks like this: list item1 list item2 list list list list item3 Horizontal RulesTo create a horizontal rule, use three or more asterisks, dashes, or underscores on a line by themselves. 123456*******-------_______ LinksTo create a link, enclose the link text in brackets and then follow it immediately with the URL in parentheses. 12[Google](https://www.google.com/)[Baidu](http://www.baidu.com/) The rendered output looks like this:GoogleBaidu CodeIf the word or phrase you want to denote as code includes one or more tick marks, you can escape it by enclosing the word or phrase in double tick marks. ImagesTo add an image, add an exclamation mark (!), followed by alt text in brackets, and the path or URL to the image asset in parentheses. You can optionally add a title after the URL in the parentheses. 1![Pikachu Detective](https://www.pokemoncenter.com/wcsstore/MarketingContent/detective-pikachu/landing_detective-pikachu_header.jpg &quot;Pikachu Detective&quot;) The rendered output looks like this: FormThe second line separates the header and the content.By default, text is left; Add two colons before and after dashes, text is center; Add one colon after dashes, text is right. 12345Name|Number|E-mail--|:--:|--:Lucas|1|xxxxx@xxxxTracy|2|xxxxx@xxxxMento|3|xxxxx@xxxx The rendered output looks like this: Name Number E-mail Lucas 1 xxxxx@xxxx Tracy 2 xxxxx@xxxx Mento 3 xxxxx@xxxx Recommended Articles Basic Syntax from Markdown Guide Markdown基本语法 来自高鸿祥的简书]]></content>
      <categories>
        <category>Programming Laugauge</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
